<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    @charset "utf-8";#sbo-rt-content html,#sbo-rt-content div,#sbo-rt-content div,#sbo-rt-content span,#sbo-rt-content applet,#sbo-rt-content object,#sbo-rt-content iframe,#sbo-rt-content h1,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5,#sbo-rt-content h6,#sbo-rt-content p,#sbo-rt-content blockquote,#sbo-rt-content pre,#sbo-rt-content a,#sbo-rt-content abbr,#sbo-rt-content acronym,#sbo-rt-content address,#sbo-rt-content big,#sbo-rt-content cite,#sbo-rt-content code,#sbo-rt-content del,#sbo-rt-content dfn,#sbo-rt-content em,#sbo-rt-content img,#sbo-rt-content ins,#sbo-rt-content kbd,#sbo-rt-content q,#sbo-rt-content s,#sbo-rt-content samp,#sbo-rt-content small,#sbo-rt-content strike,#sbo-rt-content strong,#sbo-rt-content sub,#sbo-rt-content sup,#sbo-rt-content tt,#sbo-rt-content var,#sbo-rt-content b,#sbo-rt-content u,#sbo-rt-content i,#sbo-rt-content center,#sbo-rt-content dl,#sbo-rt-content dt,#sbo-rt-content dd,#sbo-rt-content ol,#sbo-rt-content ul,#sbo-rt-content li,#sbo-rt-content fieldset,#sbo-rt-content form,#sbo-rt-content label,#sbo-rt-content legend,#sbo-rt-content table,#sbo-rt-content caption,#sbo-rt-content tdiv,#sbo-rt-content tfoot,#sbo-rt-content thead,#sbo-rt-content tr,#sbo-rt-content th,#sbo-rt-content td,#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content canvas,#sbo-rt-content details,#sbo-rt-content embed,#sbo-rt-content figure,#sbo-rt-content figcaption,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content output,#sbo-rt-content ruby,#sbo-rt-content section,#sbo-rt-content summary,#sbo-rt-content time,#sbo-rt-content mark,#sbo-rt-content audio,#sbo-rt-content video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content details,#sbo-rt-content figcaption,#sbo-rt-content figure,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content section{display:block}#sbo-rt-content div{line-height:1}#sbo-rt-content ol,#sbo-rt-content ul{list-style:none}#sbo-rt-content blockquote,#sbo-rt-content q{quotes:none}#sbo-rt-content blockquote:before,#sbo-rt-content blockquote:after,#sbo-rt-content q:before,#sbo-rt-content q:after{content:none}#sbo-rt-content table{border-collapse:collapse;border-spacing:0}@page{margin:5px !important}#sbo-rt-content p{margin:10px 0 0;line-height:125%;text-align:left}#sbo-rt-content p.byline{text-align:left;margin:-33px auto 35px;font-style:italic;font-weight:bold}#sbo-rt-content div.preface p+p.byline{margin:1em 0 0 !important}#sbo-rt-content div.preface p.byline+p.byline{margin:0 !important}#sbo-rt-content div.sect1&gt;p.byline{margin:-.25em 0 1em}#sbo-rt-content div.sect1&gt;p.byline+p.byline{margin-top:-1em}#sbo-rt-content em{font-style:italic;font-family:inherit}#sbo-rt-content em strong,#sbo-rt-content strong em{font-weight:bold;font-style:italic;font-family:inherit}#sbo-rt-content strong,#sbo-rt-content span.bold{font-weight:bold}#sbo-rt-content em.replaceable{font-style:italic}#sbo-rt-content strong.userinput{font-weight:bold;font-style:normal}#sbo-rt-content span.bolditalic{font-weight:bold;font-style:italic}#sbo-rt-content a.ulink,#sbo-rt-content a.xref,#sbo-rt-content a.email,#sbo-rt-content a.link,#sbo-rt-content a{text-decoration:none;color:#8e0012}#sbo-rt-content span.lineannotation{font-style:italic;color:#a62a2a;font-family:serif}#sbo-rt-content span.underline{text-decoration:underline}#sbo-rt-content span.strikethrough{text-decoration:line-through}#sbo-rt-content span.smallcaps{font-variant:small-caps}#sbo-rt-content span.cursor{background:#000;color:#fff}#sbo-rt-content span.smaller{font-size:75%}#sbo-rt-content .boxedtext,#sbo-rt-content .keycap{border-style:solid;border-width:1px;border-color:#000;padding:1px}#sbo-rt-content span.gray50{color:#7F7F7F;}#sbo-rt-content h1,#sbo-rt-content div.toc-title,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5{-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;font-weight:bold;text-align:left;page-break-after:avoid !important;font-family:sans-serif,"DejaVuSans"}#sbo-rt-content div.toc-title{font-size:1.5em;margin-top:20px !important;margin-bottom:30px !important}#sbo-rt-content section[data-type="sect1"] h1{font-size:1.3em;color:#8e0012;margin:40px 0 8px 0}#sbo-rt-content section[data-type="sect2"] h2{font-size:1.1em;margin:30px 0 8px 0 !important}#sbo-rt-content section[data-type="sect3"] h3{font-size:1em;color:#555;margin:20px 0 8px 0 !important}#sbo-rt-content section[data-type="sect4"] h4{font-size:1em;font-weight:normal;font-style:italic;margin:15px 0 6px 0 !important}#sbo-rt-content section[data-type="chapter"]&gt;div&gt;h1,#sbo-rt-content section[data-type="preface"]&gt;div&gt;h1,#sbo-rt-content section[data-type="appendix"]&gt;div&gt;h1,#sbo-rt-content section[data-type="glossary"]&gt;div&gt;h1,#sbo-rt-content section[data-type="bibliography"]&gt;div&gt;h1,#sbo-rt-content section[data-type="index"]&gt;div&gt;h1{font-size:2em;line-height:1;margin-bottom:50px;color:#000;padding-bottom:10px;border-bottom:1px solid #000}#sbo-rt-content span.label,#sbo-rt-content span.keep-together{font-size:inherit;font-weight:inherit}#sbo-rt-content div[data-type="part"] h1{font-size:2em;text-align:center;margin-top:0 !important;margin-bottom:50px;padding:50px 0 10px 0;border-bottom:1px solid #000}#sbo-rt-content img.width-ninety{width:90%}#sbo-rt-content img{max-width:95%;margin:0 auto;padding:0}#sbo-rt-content div.figure{background-color:transparent;text-align:center !important;margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content figure{margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content div.figure h6,#sbo-rt-content figure h6,#sbo-rt-content figure figcaption{font-size:.9rem !important;text-align:center;font-weight:normal !important;font-style:italic;font-family:serif !important;text-transform:none !important;letter-spacing:normal !important;color:#000;padding-top:.25em !important;margin-top:0 !important;page-break-before:avoid}#sbo-rt-content div.informalfigure{text-align:center !important;padding:5px 0 !important}#sbo-rt-content div.sidebar{margin:15px 0 10px 0 !important;border:1px solid #DCDCDC;background-color:#F7F7F7;padding:15px !important;page-break-inside:avoid}#sbo-rt-content aside[data-type="sidebar"]{margin:15px 0 10px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar-title,#sbo-rt-content aside[data-type="sidebar"] h5{font-weight:bold;font-size:1em;font-family:sans-serif;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar ol,#sbo-rt-content div.sidebar ul,#sbo-rt-content aside[data-type="sidebar"] ol,#sbo-rt-content aside[data-type="sidebar"] ul{margin-left:1.25em !important}#sbo-rt-content div.sidebar div.figure p.title,#sbo-rt-content aside[data-type="sidebar"] figcaption,#sbo-rt-content div.sidebar div.informalfigure div.caption{font-size:90%;text-align:center;font-weight:normal;font-style:italic;font-family:serif !important;color:#000;padding:5px !important;page-break-before:avoid;page-break-after:avoid}#sbo-rt-content div.sidebar div.tip,#sbo-rt-content div.sidebar div[data-type="tip"],#sbo-rt-content div.sidebar div.note,#sbo-rt-content div.sidebar div[data-type="note"],#sbo-rt-content div.sidebar div.warning,#sbo-rt-content div.sidebar div[data-type="warning"],#sbo-rt-content div.sidebar div[data-type="caution"],#sbo-rt-content div.sidebar div[data-type="important"]{margin:20px auto 20px auto !important;font-size:90%;width:85%}#sbo-rt-content aside[data-type="sidebar"] p.byline{font-size:90%;font-weight:bold;font-style:italic;text-align:center;text-indent:0;margin:5px auto 6px;page-break-after:avoid}#sbo-rt-content pre{white-space:pre-wrap;font-family:"Ubuntu Mono",monospace;margin:25px 0 25px 20px;font-size:85%;display:block;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content div.note pre.programlisting,#sbo-rt-content div.tip pre.programlisting,#sbo-rt-content div.warning pre.programlisting,#sbo-rt-content div.caution pre.programlisting,#sbo-rt-content div.important pre.programlisting{margin-bottom:0}#sbo-rt-content code{font-family:"Ubuntu Mono",monospace;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content code strong em,#sbo-rt-content code em strong,#sbo-rt-content pre em strong,#sbo-rt-content pre strong em,#sbo-rt-content strong code em code,#sbo-rt-content em code strong code,#sbo-rt-content span.bolditalic code{font-weight:bold;font-style:italic;font-family:"Ubuntu Mono BoldItal",monospace}#sbo-rt-content code em,#sbo-rt-content em code,#sbo-rt-content pre em,#sbo-rt-content em.replaceable{font-family:"Ubuntu Mono Ital",monospace;font-style:italic}#sbo-rt-content code strong,#sbo-rt-content strong code,#sbo-rt-content pre strong,#sbo-rt-content strong.userinput{font-family:"Ubuntu Mono Bold",monospace;font-weight:bold}#sbo-rt-content div[data-type="example"]{margin:10px 0 15px 0 !important}#sbo-rt-content div[data-type="example"] h1,#sbo-rt-content div[data-type="example"] h2,#sbo-rt-content div[data-type="example"] h3,#sbo-rt-content div[data-type="example"] h4,#sbo-rt-content div[data-type="example"] h5,#sbo-rt-content div[data-type="example"] h6{font-style:italic;font-weight:normal;text-align:left !important;text-transform:none !important;font-family:serif !important;margin:10px 0 5px 0 !important;border-bottom:1px solid #000}#sbo-rt-content li pre.example{padding:10px 0 !important}#sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],#sbo-rt-content div[data-type="example"] pre[data-type="screen"]{margin:0}#sbo-rt-content section[data-type="titlepage"]&gt;div&gt;h1{font-size:2em;margin:50px 0 10px 0 !important;line-height:1;text-align:center}#sbo-rt-content section[data-type="titlepage"] h2,#sbo-rt-content section[data-type="titlepage"] p.subtitle,#sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"]{font-size:1.3em;font-weight:normal;text-align:center;margin-top:.5em;color:#555}#sbo-rt-content section[data-type="titlepage"]&gt;div&gt;h2[data-type="author"],#sbo-rt-content section[data-type="titlepage"] p.author{font-size:1.3em;font-family:serif !important;font-weight:bold;margin:50px 0 !important;text-align:center}#sbo-rt-content section[data-type="titlepage"] p.edition{text-align:center;text-transform:uppercase;margin-top:2em}#sbo-rt-content section[data-type="titlepage"]{text-align:center}#sbo-rt-content section[data-type="titlepage"]:after{content:url(css_assets/titlepage_footer_ebook.png);margin:0 auto;max-width:80%}#sbo-rt-content div.book div.titlepage div.publishername{margin-top:60%;margin-bottom:20px;text-align:center;font-size:1.25em}#sbo-rt-content div.book div.titlepage div.locations p{margin:0;text-align:center}#sbo-rt-content div.book div.titlepage div.locations p.cities{font-size:80%;text-align:center;margin-top:5px}#sbo-rt-content section.preface[title="Dedication"]&gt;div.titlepage h2.title{text-align:center;text-transform:uppercase;font-size:1.5em;margin-top:50px;margin-bottom:50px}#sbo-rt-content ul.stafflist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.stafflist li{list-style-type:none;padding:5px 0}#sbo-rt-content ul.printings li{list-style-type:none}#sbo-rt-content section.preface[title="Dedication"] p{font-style:italic;text-align:center}#sbo-rt-content div.colophon h1.title{font-size:1.3em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon h2.subtitle{margin:0 !important;color:#000;font-family:serif !important;font-size:1em;font-weight:normal}#sbo-rt-content div.colophon div.author h3.author{font-size:1.1em;font-family:serif !important;margin:10px 0 0 !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h4,#sbo-rt-content div.colophon div.editor h3.editor{color:#000;font-size:.8em;margin:15px 0 0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h3.editor{font-size:.8em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.publisher{margin-top:10px}#sbo-rt-content div.colophon div.publisher p,#sbo-rt-content div.colophon div.publisher span.publishername{margin:0;font-size:.8em}#sbo-rt-content div.legalnotice p,#sbo-rt-content div.timestamp p{font-size:.8em}#sbo-rt-content div.timestamp p{margin-top:10px}#sbo-rt-content div.colophon[title="About the Author"] h1.title,#sbo-rt-content div.colophon[title="Colophon"] h1.title{font-size:1.5em;margin:0 !important;font-family:sans-serif !important}#sbo-rt-content section.chapter div.titlepage div.author{margin:10px 0 10px 0}#sbo-rt-content section.chapter div.titlepage div.author div.affiliation{font-style:italic}#sbo-rt-content div.attribution{margin:5px 0 0 50px !important}#sbo-rt-content h3.author span.orgname{display:none}#sbo-rt-content div.epigraph{margin:10px 0 10px 20px !important;page-break-inside:avoid;font-size:90%}#sbo-rt-content div.epigraph p{font-style:italic}#sbo-rt-content blockquote,#sbo-rt-content div.blockquote{margin:10px !important;page-break-inside:avoid;font-size:95%}#sbo-rt-content blockquote p,#sbo-rt-content div.blockquote p{font-style:italic;margin:.75em 0 0 !important}#sbo-rt-content blockquote div.attribution,#sbo-rt-content blockquote p[data-type="attribution"]{margin:5px 0 10px 30px !important;text-align:right;width:80%}#sbo-rt-content blockquote div.attribution p,#sbo-rt-content blockquote p[data-type="attribution"]{font-style:normal;margin-top:5px}#sbo-rt-content blockquote div.attribution p:before,#sbo-rt-content blockquote p[data-type="attribution"]:before{font-style:normal;content:"—";-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none}#sbo-rt-content p.right{text-align:right;margin:0}#sbo-rt-content div[data-type="footnotes"]{border-top:1px solid black;margin-top:2em}#sbo-rt-content sub,#sbo-rt-content sup{font-size:75%;line-height:0;position:relative}#sbo-rt-content sup{top:-.5em}#sbo-rt-content sub{bottom:-.25em}#sbo-rt-content p[data-type="footnote"]{font-size:90% !important;line-height:1.2em !important;margin-left:2.5em !important;text-indent:-2.3em !important}#sbo-rt-content p[data-type="footnote"] sup{display:inline-block !important;position:static !important;width:2em !important;text-align:right !important;font-size:100% !important;padding-right:.5em !important}#sbo-rt-content p[data-type="footnote"] a[href$="-marker"]{font-family:sans-serif !important;font-size:90% !important;color:#8e0012 !important}#sbo-rt-content p[data-type="footnote"] a[data-type="xref"]{margin:0 !important;padding:0 !important;text-indent:0 !important}#sbo-rt-content a[data-type="noteref"]{font-family:sans-serif !important;color:#8e0012;margin-left:0;padding-left:0}#sbo-rt-content div.refentry p.refname{font-size:1em;font-family:sans-serif,"DejaVuSans";font-weight:bold;margin-bottom:5px;overflow:auto;width:100%}#sbo-rt-content div.refentry{width:100%;display:block;margin-top:2em}#sbo-rt-content div.refsynopsisdiv{display:block;clear:both}#sbo-rt-content div.refentry header{page-break-inside:avoid !important;display:block;break-inside:avoid !important;padding-top:0;border-bottom:1px solid #000}#sbo-rt-content div.refsect1 h6{font-size:.9em;font-family:sans-serif,"DejaVuSans";font-weight:bold}#sbo-rt-content div.refsect1{margin-top:3em}#sbo-rt-content dl{margin-bottom:1.5em !important}#sbo-rt-content dt{padding-top:10px !important;padding-bottom:0 !important;line-height:1.25rem;font-style:italic}#sbo-rt-content dd{margin:10px 0 .25em 1.5em !important;line-height:1.65em !important}#sbo-rt-content dd p{padding:0 !important;margin:0 0 10px !important}#sbo-rt-content dd ol,#sbo-rt-content dd ul{padding-left:1em}#sbo-rt-content dd li{margin-top:0;margin-bottom:0}#sbo-rt-content dd,#sbo-rt-content li{text-align:left}#sbo-rt-content ul,#sbo-rt-content ul&gt;li,#sbo-rt-content ol ul,#sbo-rt-content ol ul&gt;li,#sbo-rt-content ul ol ul,#sbo-rt-content ul ol ul&gt;li{list-style-type:disc}#sbo-rt-content ul ul,#sbo-rt-content ul ul&gt;li{list-style-type:square}#sbo-rt-content ul ul ul,#sbo-rt-content ul ul ul&gt;li{list-style-type:circle}#sbo-rt-content ol,#sbo-rt-content ol&gt;li,#sbo-rt-content ol ul ol,#sbo-rt-content ol ul ol&gt;li,#sbo-rt-content ul ol,#sbo-rt-content ul ol&gt;li{list-style-type:decimal}#sbo-rt-content ol ol,#sbo-rt-content ol ol&gt;li{list-style-type:lower-alpha}#sbo-rt-content ol ol ol,#sbo-rt-content ol ol ol&gt;li{list-style-type:lower-roman}#sbo-rt-content ol,#sbo-rt-content ul{list-style-position:outside;margin:15px 0 15px 1.25em;padding-left:2.25em}#sbo-rt-content ol li,#sbo-rt-content ul li{margin:.5em 0 .65em;line-height:125%}#sbo-rt-content div.orderedlistalpha{list-style-type:upper-alpha}#sbo-rt-content table.simplelist,#sbo-rt-content ul.simplelist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.simplelist li{list-style-type:none;padding:5px 0}#sbo-rt-content table.simplelist td{border:none}#sbo-rt-content table.simplelist tr{border-bottom:none}#sbo-rt-content table.simplelist tr:nth-of-type(even){background-color:transparent}#sbo-rt-content dl.calloutlist p:first-child{margin-top:-25px !important}#sbo-rt-content dl.calloutlist dd{padding-left:0;margin-top:-25px}#sbo-rt-content dl.calloutlist img,#sbo-rt-content a.co img{padding:0}#sbo-rt-content div.toc ol{margin-top:8px !important;margin-bottom:8px !important;margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.toc ol ol{margin-left:30px !important;padding-left:0 !important}#sbo-rt-content div.toc ol li{list-style-type:none}#sbo-rt-content div.toc a{color:#8e0012}#sbo-rt-content div.toc ol a{font-size:1em;font-weight:bold}#sbo-rt-content div.toc ol&gt;li&gt;ol a{font-weight:bold;font-size:1em}#sbo-rt-content div.toc ol&gt;li&gt;ol&gt;li&gt;ol a{text-decoration:none;font-weight:normal;font-size:1em}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"],#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{margin:30px !important;font-size:90%;padding:10px 8px 20px 8px !important;page-break-inside:avoid}#sbo-rt-content div.tip ol,#sbo-rt-content div.tip ul,#sbo-rt-content div[data-type="tip"] ol,#sbo-rt-content div[data-type="tip"] ul,#sbo-rt-content div.note ol,#sbo-rt-content div.note ul,#sbo-rt-content div[data-type="note"] ol,#sbo-rt-content div[data-type="note"] ul,#sbo-rt-content div.warning ol,#sbo-rt-content div.warning ul,#sbo-rt-content div[data-type="warning"] ol,#sbo-rt-content div[data-type="warning"] ul,#sbo-rt-content div[data-type="caution"] ol,#sbo-rt-content div[data-type="caution"] ul,#sbo-rt-content div[data-type="important"] ol,#sbo-rt-content div[data-type="important"] ul{margin-left:1.5em !important}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"]{border:1px solid #BEBEBE;background-color:transparent}#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{border:1px solid #BC8F8F}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="note"] h1,#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1,#sbo-rt-content div[data-type="important"] h6{font-weight:bold;font-size:110%;font-family:sans-serif !important;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px !important}#sbo-rt-content div[data-type="tip"] figure h6,#sbo-rt-content div[data-type="note"] figure h6,#sbo-rt-content div[data-type="warning"] figure h6,#sbo-rt-content div[data-type="caution"] figure h6,#sbo-rt-content div[data-type="important"] figure h6{font-family:serif !important}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div[data-type="note"] h1{color:#737373}#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="important"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1{color:#C67171}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,#sbo-rt-content div.safarienabled{background-color:transparent;margin:8px 0 0 !important;border:0 solid #BEBEBE;font-size:100%;padding:0 !important;page-break-inside:avoid}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,#sbo-rt-content div.safarienabled h6{display:none}#sbo-rt-content div.table,#sbo-rt-content table{margin:15px 0 30px 0 !important;max-width:95%;border:none !important;background:none;display:table !important}#sbo-rt-content div.table,#sbo-rt-content div.informaltable,#sbo-rt-content table{page-break-inside:avoid}#sbo-rt-content table li{margin:10px 0 0 .25em !important}#sbo-rt-content tr,#sbo-rt-content tr td{border-bottom:1px solid #c3c3c3}#sbo-rt-content thead td,#sbo-rt-content thead th{border-bottom:#9d9d9d 1px solid !important;border-top:#9d9d9d 1px solid !important}#sbo-rt-content tr:nth-of-type(even){background-color:#f1f6fc}#sbo-rt-content thead{font-family:sans-serif;font-weight:bold}#sbo-rt-content td,#sbo-rt-content th{display:table-cell;padding:.3em;text-align:left;vertical-align:top;font-size:80%}#sbo-rt-content th{vertical-align:bottom}#sbo-rt-content div.informaltable table{margin:10px auto !important}#sbo-rt-content div.informaltable table tr{border-bottom:none}#sbo-rt-content div.informaltable table tr:nth-of-type(even){background-color:transparent}#sbo-rt-content div.informaltable td,#sbo-rt-content div.informaltable th{border:#9d9d9d 1px solid}#sbo-rt-content div.table-title,#sbo-rt-content table caption{font-weight:normal;font-style:italic;font-family:serif;font-size:1em;margin:10px 0 10px 0 !important;padding:0;page-break-after:avoid;text-align:left !important}#sbo-rt-content table code{font-size:smaller;word-break:break-all}#sbo-rt-content table.border tbody&gt;tr:last-child&gt;td{border-bottom:transparent}#sbo-rt-content div.equation,#sbo-rt-content div[data-type="equation"]{margin:10px 0 15px 0 !important}#sbo-rt-content div.equation-title,#sbo-rt-content div[data-type="equation"] h5{font-style:italic;font-weight:normal;font-family:serif !important;font-size:90%;margin:20px 0 10px 0 !important;page-break-after:avoid}#sbo-rt-content div.equation-contents{margin-left:20px}#sbo-rt-content div[data-type="equation"] math{font-size:calc(.35em + 1vw)}#sbo-rt-content span.inlinemediaobject{height:.85em;display:inline-block;margin-bottom:.2em}#sbo-rt-content span.inlinemediaobject img{margin:0;height:.85em}#sbo-rt-content div.informalequation{margin:20px 0 20px 20px;width:75%}#sbo-rt-content div.informalequation img{width:75%}#sbo-rt-content div.index{text-indent:0}#sbo-rt-content div.index h3{padding:.25em;margin-top:1em !important;background-color:#F0F0F0}#sbo-rt-content div.index li{line-height:130%;list-style-type:none}#sbo-rt-content div.index a.indexterm{color:#8e0012 !important}#sbo-rt-content div.index ul{margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.index ul ul{margin-left:2em !important;margin-top:0 !important}#sbo-rt-content code.boolean,#sbo-rt-content .navy{color:rgb(0,0,128);}#sbo-rt-content code.character,#sbo-rt-content .olive{color:rgb(128,128,0);}#sbo-rt-content code.comment,#sbo-rt-content .blue{color:rgb(0,0,255);}#sbo-rt-content code.conditional,#sbo-rt-content .limegreen{color:rgb(50,205,50);}#sbo-rt-content code.constant,#sbo-rt-content .darkorange{color:rgb(255,140,0);}#sbo-rt-content code.debug,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.define,#sbo-rt-content .darkgoldenrod,#sbo-rt-content .gold{color:rgb(184,134,11);}#sbo-rt-content code.delimiter,#sbo-rt-content .dimgray{color:rgb(105,105,105);}#sbo-rt-content code.error,#sbo-rt-content .red{color:rgb(255,0,0);}#sbo-rt-content code.exception,#sbo-rt-content .salmon{color:rgb(250,128,11);}#sbo-rt-content code.float,#sbo-rt-content .steelblue{color:rgb(70,130,180);}#sbo-rt-content pre code.function,#sbo-rt-content .green{color:rgb(0,128,0);}#sbo-rt-content code.identifier,#sbo-rt-content .royalblue{color:rgb(65,105,225);}#sbo-rt-content code.ignore,#sbo-rt-content .gray{color:rgb(128,128,128);}#sbo-rt-content code.include,#sbo-rt-content .purple{color:rgb(128,0,128);}#sbo-rt-content code.keyword,#sbo-rt-content .sienna{color:rgb(160,82,45);}#sbo-rt-content code.label,#sbo-rt-content .deeppink{color:rgb(255,20,147);}#sbo-rt-content code.macro,#sbo-rt-content .orangered{color:rgb(255,69,0);}#sbo-rt-content code.number,#sbo-rt-content .brown{color:rgb(165,42,42);}#sbo-rt-content code.operator,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.preCondit,#sbo-rt-content .teal{color:rgb(0,128,128);}#sbo-rt-content code.preProc,#sbo-rt-content .fuschia{color:rgb(255,0,255);}#sbo-rt-content code.repeat,#sbo-rt-content .indigo{color:rgb(75,0,130);}#sbo-rt-content code.special,#sbo-rt-content .saddlebrown{color:rgb(139,69,19);}#sbo-rt-content code.specialchar,#sbo-rt-content .magenta{color:rgb(255,0,255);}#sbo-rt-content code.specialcomment,#sbo-rt-content .seagreen{color:rgb(46,139,87);}#sbo-rt-content code.statement,#sbo-rt-content .forestgreen{color:rgb(34,139,34);}#sbo-rt-content code.storageclass,#sbo-rt-content .plum{color:rgb(221,160,221);}#sbo-rt-content code.string,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.structure,#sbo-rt-content .chocolate{color:rgb(210,106,30);}#sbo-rt-content code.tag,#sbo-rt-content .darkcyan{color:rgb(0,139,139);}#sbo-rt-content code.todo,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.type,#sbo-rt-content .mediumslateblue{color:rgb(123,104,238);}#sbo-rt-content code.typedef,#sbo-rt-content .darkgreen{color:rgb(0,100,0);}#sbo-rt-content code.underlined{text-decoration:underline;}#sbo-rt-content pre code.hll{background-color:#ffc}#sbo-rt-content pre code.c{color:#09F;font-style:italic}#sbo-rt-content pre code.err{color:#A00}#sbo-rt-content pre code.k{color:#069;font-weight:bold}#sbo-rt-content pre code.o{color:#555}#sbo-rt-content pre code.cm{color:#35586C;font-style:italic}#sbo-rt-content pre code.cp{color:#099}#sbo-rt-content pre code.c1{color:#35586C;font-style:italic}#sbo-rt-content pre code.cs{color:#35586C;font-weight:bold;font-style:italic}#sbo-rt-content pre code.gd{background-color:#FCC}#sbo-rt-content pre code.ge{font-style:italic}#sbo-rt-content pre code.gr{color:#F00}#sbo-rt-content pre code.gh{color:#030;font-weight:bold}#sbo-rt-content pre code.gi{background-color:#CFC}#sbo-rt-content pre code.go{color:#000}#sbo-rt-content pre code.gp{color:#009;font-weight:bold}#sbo-rt-content pre code.gs{font-weight:bold}#sbo-rt-content pre code.gu{color:#030;font-weight:bold}#sbo-rt-content pre code.gt{color:#9C6}#sbo-rt-content pre code.kc{color:#069;font-weight:bold}#sbo-rt-content pre code.kd{color:#069;font-weight:bold}#sbo-rt-content pre code.kn{color:#069;font-weight:bold}#sbo-rt-content pre code.kp{color:#069}#sbo-rt-content pre code.kr{color:#069;font-weight:bold}#sbo-rt-content pre code.kt{color:#078;font-weight:bold}#sbo-rt-content pre code.m{color:#F60}#sbo-rt-content pre code.s{color:#C30}#sbo-rt-content pre code.na{color:#309}#sbo-rt-content pre code.nb{color:#366}#sbo-rt-content pre code.nc{color:#0A8;font-weight:bold}#sbo-rt-content pre code.no{color:#360}#sbo-rt-content pre code.nd{color:#99F}#sbo-rt-content pre code.ni{color:#999;font-weight:bold}#sbo-rt-content pre code.ne{color:#C00;font-weight:bold}#sbo-rt-content pre code.nf{color:#C0F}#sbo-rt-content pre code.nl{color:#99F}#sbo-rt-content pre code.nn{color:#0CF;font-weight:bold}#sbo-rt-content pre code.nt{color:#309;font-weight:bold}#sbo-rt-content pre code.nv{color:#033}#sbo-rt-content pre code.ow{color:#000;font-weight:bold}#sbo-rt-content pre code.w{color:#bbb}#sbo-rt-content pre code.mf{color:#F60}#sbo-rt-content pre code.mh{color:#F60}#sbo-rt-content pre code.mi{color:#F60}#sbo-rt-content pre code.mo{color:#F60}#sbo-rt-content pre code.sb{color:#C30}#sbo-rt-content pre code.sc{color:#C30}#sbo-rt-content pre code.sd{color:#C30;font-style:italic}#sbo-rt-content pre code.s2{color:#C30}#sbo-rt-content pre code.se{color:#C30;font-weight:bold}#sbo-rt-content pre code.sh{color:#C30}#sbo-rt-content pre code.si{color:#A00}#sbo-rt-content pre code.sx{color:#C30}#sbo-rt-content pre code.sr{color:#3AA}#sbo-rt-content pre code.s1{color:#C30}#sbo-rt-content pre code.ss{color:#A60}#sbo-rt-content pre code.bp{color:#366}#sbo-rt-content pre code.vc{color:#033}#sbo-rt-content pre code.vg{color:#033}#sbo-rt-content pre code.vi{color:#033}#sbo-rt-content pre code.il{color:#F60}#sbo-rt-content pre code.g{color:#050}#sbo-rt-content pre code.l{color:#C60}#sbo-rt-content pre code.l{color:#F90}#sbo-rt-content pre code.n{color:#008}#sbo-rt-content pre code.nx{color:#008}#sbo-rt-content pre code.py{color:#96F}#sbo-rt-content pre code.p{color:#000}#sbo-rt-content pre code.x{color:#F06}#sbo-rt-content div.blockquote_sampler_toc{width:95%;margin:5px 5px 5px 10px !important}#sbo-rt-content div{font-family:serif;text-align:left}#sbo-rt-content .gray-background,#sbo-rt-content .reverse-video{background:#2E2E2E;color:#FFF}#sbo-rt-content .light-gray-background{background:#A0A0A0}#sbo-rt-content .preserve-whitespace{white-space:pre-wrap}#sbo-rt-content pre.break-code,#sbo-rt-content code.break-code,#sbo-rt-content .break-code pre,#sbo-rt-content .break-code code{word-break:break-all}#sbo-rt-content span.gray{color:#4C4C4C}#sbo-rt-content .width-10,#sbo-rt-content figure.width-10 img{width:10% !important}#sbo-rt-content .width-20,#sbo-rt-content figure.width-20 img{width:20% !important}#sbo-rt-content .width-30,#sbo-rt-content figure.width-30 img{width:30% !important}#sbo-rt-content .width-40,#sbo-rt-content figure.width-40 img{width:40% !important}#sbo-rt-content .width-50,#sbo-rt-content figure.width-50 img{width:50% !important}#sbo-rt-content .width-60,#sbo-rt-content figure.width-60 img{width:60% !important}#sbo-rt-content .width-70,#sbo-rt-content figure.width-70 img{width:70% !important}#sbo-rt-content .width-80,#sbo-rt-content figure.width-80 img{width:80% !important}#sbo-rt-content .width-90,#sbo-rt-content figure.width-90 img{width:90% !important}#sbo-rt-content .width-full,#sbo-rt-content .width-100{width:100% !important}#sbo-rt-content .sc{text-transform:none !important}#sbo-rt-content .right{float:none !important}#sbo-rt-content a.totri-footnote{padding:0 !important}#sbo-rt-content figure.width-10,#sbo-rt-content figure.width-20,#sbo-rt-content figure.width-30,#sbo-rt-content figure.width-40,#sbo-rt-content figure.width-50,#sbo-rt-content figure.width-60,#sbo-rt-content figure.width-70,#sbo-rt-content figure.width-80,#sbo-rt-content figure.width-90{width:auto !important}#sbo-rt-content p img,#sbo-rt-content pre img{height:1em;width:1em}#sbo-rt-content .tablerule td{border-bottom:.25pt solid black !important}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 17. JavaScript Tools and Extensions"><div class="chapter" id="extensions">
<h1><span class="label">Chapter 17. </span>JavaScript Tools and Extensions</h1>


<p>Congratulations<a data-type="indexterm" data-primary="tools and extensions" id="tools17"/><a data-type="indexterm" data-primary="tools and extensions" data-secondary="overview of" id="idm46198482799384"/> on reaching the final chapter of this book. If you
have read everything that comes before, you now have a detailed
understanding of the JavaScript language and know how to use it in
Node and in web browsers. This chapter is a kind of graduation
present: it introduces a handful of important programming tools that
many JavaScript programmers find useful, and also describes two
widely used extensions to the core JavaScript language. Whether or not
you choose to use these tools and extensions for your own projects,
you are almost certain to see them used in other projects, so it is
important to at least know what they are.</p>

<p>The tools and language extensions covered in this chapter are:</p>

<ul>
<li>
<p>ESLint for finding potential bugs and style problems in your code.</p>
</li>
<li>
<p>Prettier for formatting your JavaScript code in a standardized way.</p>
</li>
<li>
<p>Jest as an all-in-one solution for writing JavaScript unit tests.</p>
</li>
<li>
<p>npm for managing and installing the software libraries that your
program depends on.</p>
</li>
<li>
<p>Code-bundling tools—like webpack, Rollup, and Parcel—that convert
your modules of JavaScript code into a single bundle for use on the
web.</p>
</li>
<li>
<p>Babel for translating JavaScript code that uses brand-new language
features (or that uses language extensions) into JavaScript code
that can run in current web browsers.</p>
</li>
<li>
<p>The JSX language extension (used by the React framework) that allows
you to describe user interfaces using JavaScript expressions that
look like HTML markup.</p>
</li>
<li>
<p>The Flow language extension (or the similar TypeScript extension)
that allows you to annotate your JavaScript code with types and
check your code for type safety.</p>
</li>
</ul>

<p>This chapter does not document these tools and extensions in any
comprehensive way. The goal is simply to explain them in enough depth
that you can understand why they are useful and when you might want to
use them. Everything covered in this chapter is widely used in the
JavaScript programming world, and if you do decide to adopt a tool or
extension, you’ll find lots of documentation and tutorials online.</p>






<section data-type="sect1" data-pdf-bookmark="17.1 Linting with ESLint"><div class="sect1" id="eslint">
<h1>17.1 Linting with ESLint</h1>

<p>In<a data-type="indexterm" data-primary="tools and extensions" data-secondary="linting with ESLint" id="idm46198482786088"/><a data-type="indexterm" data-primary="ESLint" id="idm46198482785080"/><a data-type="indexterm" data-primary="linting tools" id="idm46198482784408"/> programming, the term <em>lint</em> refers to code that, while technically
correct, is unsightly, or a possible bug, or suboptimal in some way. A
<em>linter</em> is a tool for detecting lint in your code, and <em>linting</em> is
the process of running a linter on your code (and then fixing your
code to remove the lint so that the linter no longer complains).</p>

<p>The most commonly used linter for JavaScript today is <a href="https://eslint.org">ESLint</a>. If you run it and then take the time to actually
fix the issues it points out, it will make your code cleaner and less
likely to have bugs. Consider the following code:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">var</code> <code class="nx">x</code> <code class="o">=</code> <code class="s1">'unused'</code><code class="p">;</code>

<code class="kr">export</code> <code class="kd">function</code> <code class="nx">factorial</code><code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">x</code> <code class="o">==</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
      <code class="k">return</code> <code class="mi">1</code><code class="p">;</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">x</code> <code class="o">*</code> <code class="nx">factorial</code><code class="p">(</code><code class="nx">x</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
    <code class="p">}</code>
<code class="p">}</code></pre>

<p>If you run ESLint on this code, you might get output like this:</p>

<pre data-type="programlisting">$ eslint code/ch17/linty.js

code/ch17/linty.js
  1:1   error    Unexpected var, use let or const instead      no-var
  1:5   error    'x' is assigned a value but never used        no-unused-vars
  1:9   warning  Strings must use doublequote                  quotes
  4:11  error    Expected '===' and instead saw '=='           eqeqeq
  5:1   error    Expected indentation of 8 spaces but found 6  indent
  7:28  error    Missing semicolon                             semi

✖ 6 problems (5 errors, 1 warning)
  3 errors and 1 warning potentially fixable with the `--fix` option.</pre>

<p>Linters can seem nitpicky sometimes. Does it really matter whether we
used double quotes or single quotes for our strings? On the other
hand, getting indentation right is important for readability, and
using  <code>===</code> and <code>let</code> instead of <code>==</code> and <code>var</code> protects you from
subtle bugs. And unused variables are dead weight in your code—there is no
reason to keep those around.</p>

<p>ESLint defines many linting rules and has an ecosystem of plug-ins that
add many more. But ESLint is fully configurable, and you can define a
configuration file that tunes ESLint to enforce exactly the rules you
want and only those rules.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.2 JavaScript Formatting with Prettier"><div class="sect1" id="prettier">
<h1>17.2 JavaScript Formatting with Prettier</h1>

<p>One<a data-type="indexterm" data-primary="Prettier" id="idm46198482736536"/><a data-type="indexterm" data-primary="tools and extensions" data-secondary="JavaScript formatting with Prettier" id="idm46198482735800"/> of the reasons that some projects use linters is to enforce a
consistent coding style so that when a team of programmers is working
on a shared codebase, they use compatible code conventions. This
includes code indentation rules, but can also include things like what
kind of quotation marks are preferred and whether there should be a
space between the <code>for</code> keyword and the open parenthesis that follows
it.</p>

<p>A modern alternative to enforcing code formatting rules via a linter
is to adopt a tool like <a href="https://prettier.io">Prettier</a> to
automatically parse and reformat all of your code.</p>

<p>Suppose you have written the following function, which works, but is
formatted unconventionally:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">factorial</code><code class="p">(</code><code class="nx">x</code><code class="p">)</code>
<code class="p">{</code>
         <code class="k">if</code><code class="p">(</code><code class="nx">x</code><code class="o">===</code><code class="mi">1</code><code class="p">){</code><code class="k">return</code> <code class="mi">1</code><code class="p">}</code>
           <code class="k">else</code><code class="p">{</code><code class="k">return</code> <code class="nx">x</code><code class="o">*</code><code class="nx">factorial</code><code class="p">(</code><code class="nx">x</code><code class="o">-</code><code class="mi">1</code><code class="p">)}</code>
<code class="p">}</code></pre>

<p>Running Prettier on this code fixes the indentation, adds missing
semicolons, adds spaces around binary operators and inserts line
breaks after <code>{</code> and before <code>}</code>, resulting in much more
conventional-looking code:</p>

<pre data-type="programlisting">$ prettier factorial.js
function factorial(x) {
  if (x === 1) {
    return 1;
  } else {
    return x * factorial(x - 1);
  }
}</pre>

<p>If you invoke Prettier with the <code>--write</code> option, it will simply
reformat the specified file in place rather than printing a
reformatted version. If you use <code>git</code> to manage your source code, you
can invoke Prettier with the <code>--write</code> option in a commit hook so
that code is automatically formatted before being checked in.</p>

<p>Prettier is particularly powerful if you configure your code editor to
run it automatically every time you save a file. I find it liberating
to write sloppy code and see it fixed automatically for me.</p>

<p>Prettier is configurable, but it only has a few options. You can select
the maximum line length, the indentation amount, whether semicolons
should be used, whether strings should be single- or double-quoted, and
a few other things. In general, Prettier’s default options are quite
reasonable. The idea is that you just adopt Prettier for your project
and then never have to think about code formatting again.</p>

<p>Personally, I really like using Prettier on JavaScript projects. I
have not used it for the code in this book, however, because in much of
my code I rely on careful hand formatting to align my comments
vertically, and Prettier messes them up.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.3 Unit Testing with Jest"><div class="sect1" id="jest">
<h1>17.3 Unit Testing with Jest</h1>

<p>Writing<a data-type="indexterm" data-primary="tools and extensions" data-secondary="unit testing with Jest" id="idm46198482636024"/><a data-type="indexterm" data-primary="Jest" id="idm46198482635016"/><a data-type="indexterm" data-primary="unit testing" id="idm46198482634344"/> tests is an important part of any nontrivial programming
project. Dynamic languages like JavaScript support testing frameworks
that dramatically reduce the effort required to write tests, and
almost make test writing fun! There are a lot of test tools and
libraries for JavaScript, and many are written in a modular way so
that it is possible to pick one library as your test runner, another
library for assertions, and a third for mocking. In this section,
however, we’ll describe <a href="https://jestjs.io">Jest</a>, which is a popular
framework that includes everything you need in a single package.</p>

<p>Suppose you’ve written the following function:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kr">const</code> <code class="nx">getJSON</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"./getJSON.js"</code><code class="p">);</code>

<code class="cm">/**</code>
<code class="cm"> * getTemperature() takes the name of a city as its input, and returns</code>
<code class="cm"> * a Promise that will resolve to the current temperature of that city,</code>
<code class="cm"> * in degrees Fahrenheit. It relies on a (fake) web service that returns</code>
<code class="cm"> * world temperatures in degrees Celsius.</code>
<code class="cm"> */</code>
<code class="nx">module</code><code class="p">.</code><code class="nx">exports</code> <code class="o">=</code> <code class="nx">async</code> <code class="kd">function</code> <code class="nx">getTemperature</code><code class="p">(</code><code class="nx">city</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// Get the temperature in Celsius from the web service</code>
    <code class="kd">let</code> <code class="nx">c</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">getJSON</code><code class="p">(</code>
        <code class="sb">`https://globaltemps.example.com/api/city/</code><code class="si">${</code><code class="nx">city</code><code class="p">.</code><code class="nx">toLowerCase</code><code class="p">()</code><code class="si">}</code><code class="sb">`</code>
    <code class="p">);</code>
    <code class="c1">// Convert to Fahrenheit and return that value.</code>
    <code class="k">return</code> <code class="p">(</code><code class="nx">c</code> <code class="o">*</code> <code class="mi">5</code> <code class="o">/</code> <code class="mi">9</code><code class="p">)</code> <code class="o">+</code> <code class="mi">32</code><code class="p">;</code>  <code class="c1">// TODO: double-check this formula</code>
<code class="p">};</code></pre>

<p>A good set of tests for this function might verify that
<code>getTemperature()</code> is fetching the right URL, and that it is
converting temperature scales correctly. We can do this with a
Jest-based test like the following. This code defines a mock
implementation of <code>getJSON()</code> so that the test does not actually make
a network request. And because <code>getTemperature()</code> is an async
function, the tests are async as well—it can be tricky to test
asynchronous functions, but Jest makes it relatively easy:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Import the function we are going to test</code>
<code class="kr">const</code> <code class="nx">getTemperature</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"./getTemperature.js"</code><code class="p">);</code>

<code class="c1">// And mock the getJSON() module that getTemperature() depends on</code>
<code class="nx">jest</code><code class="p">.</code><code class="nx">mock</code><code class="p">(</code><code class="s2">"./getJSON"</code><code class="p">);</code>
<code class="kr">const</code> <code class="nx">getJSON</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"./getJSON.js"</code><code class="p">);</code>

<code class="c1">// Tell the mock getJSON() function to return an already resolved Promise</code>
<code class="c1">// with fulfillment value 0.</code>
<code class="nx">getJSON</code><code class="p">.</code><code class="nx">mockResolvedValue</code><code class="p">(</code><code class="mi">0</code><code class="p">);</code>

<code class="c1">// Our set of tests for getTemperature() begins here</code>
<code class="nx">describe</code><code class="p">(</code><code class="s2">"getTemperature()"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="c1">// This is the first test. We're ensuring that getTemperature() calls</code>
    <code class="c1">// getJSON() with the URL that we expect</code>
    <code class="nx">test</code><code class="p">(</code><code class="s2">"Invokes the correct API"</code><code class="p">,</code> <code class="nx">async</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">expectedURL</code> <code class="o">=</code> <code class="s2">"https://globaltemps.example.com/api/city/vancouver"</code><code class="p">;</code>
        <code class="kd">let</code> <code class="nx">t</code> <code class="o">=</code> <code class="nx">await</code><code class="p">(</code><code class="nx">getTemperature</code><code class="p">(</code><code class="s2">"Vancouver"</code><code class="p">));</code>
        <code class="c1">// Jest mocks remember how they were called, and we can check that.</code>
        <code class="nx">expect</code><code class="p">(</code><code class="nx">getJSON</code><code class="p">).</code><code class="nx">toHaveBeenCalledWith</code><code class="p">(</code><code class="nx">expectedURL</code><code class="p">);</code>
    <code class="p">});</code>

    <code class="c1">// This second test verifies that getTemperature() converts</code>
    <code class="c1">// Celsius to Fahrenheit correctly</code>
    <code class="nx">test</code><code class="p">(</code><code class="s2">"Converts C to F correctly"</code><code class="p">,</code> <code class="nx">async</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="nx">getJSON</code><code class="p">.</code><code class="nx">mockResolvedValue</code><code class="p">(</code><code class="mi">0</code><code class="p">);</code>                <code class="c1">// If getJSON returns 0C</code>
        <code class="nx">expect</code><code class="p">(</code><code class="nx">await</code> <code class="nx">getTemperature</code><code class="p">(</code><code class="s2">"x"</code><code class="p">)).</code><code class="nx">toBe</code><code class="p">(</code><code class="mi">32</code><code class="p">);</code>  <code class="c1">// We expect 32F</code>

        <code class="c1">// 100C should convert to 212F</code>
        <code class="nx">getJSON</code><code class="p">.</code><code class="nx">mockResolvedValue</code><code class="p">(</code><code class="mi">100</code><code class="p">);</code>              <code class="c1">// If getJSON returns 100C</code>
        <code class="nx">expect</code><code class="p">(</code><code class="nx">await</code> <code class="nx">getTemperature</code><code class="p">(</code><code class="s2">"x"</code><code class="p">)).</code><code class="nx">toBe</code><code class="p">(</code><code class="mi">212</code><code class="p">);</code> <code class="c1">// We expect 212F</code>
    <code class="p">});</code>
<code class="p">});</code></pre>

<p>With the test written, we can use the <code>jest</code> command to run it, and
we discover that one of our tests fails:</p>

<pre data-type="programlisting">$ jest getTemperature
 FAIL  ch17/getTemperature.test.js
  getTemperature()
    ✓ Invokes the correct API (4ms)
    ✕ Converts C to F correctly (3ms)

  ● getTemperature() › Converts C to F correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 212
    Received: 87.55555555555556

      29 |         // 100C should convert to 212F
      30 |         getJSON.mockResolvedValue(100); // If getJSON returns 100C
    &gt; 31 |         expect(await getTemperature("x")).toBe(212); // Expect 212F
         |                                           ^
      32 |     });
      33 | });
      34 |

      at Object.&lt;anonymous&gt; (ch17/getTemperature.test.js:31:43)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 passed, 2 total
Snapshots:   0 total
Time:        1.403s
Ran all test suites matching /getTemperature/i.</pre>

<p>Our <code>getTemperature()</code> implementation is using the wrong formula for
converting C to F. It multiplies by 5 and divides by 9 rather than
multiplying by 9 and dividing by 5. If we fix the code and run Jest
again, we can see the tests pass. And, as a bonus, if we add the
<code>--coverage</code> argument when we invoke <code>jest</code>, it will compute and
display the code coverage for our tests:</p>

<pre data-type="programlisting">$ jest --coverage getTemperature
 PASS  ch17/getTemperature.test.js
  getTemperature()
    ✓ Invokes the correct API (3ms)
    ✓ Converts C to F correctly (1ms)

------------------|--------|---------|---------|---------|------------------|
File              | % Stmts| % Branch|  % Funcs|  % Lines| Uncovered Line #s|
------------------|--------|---------|---------|---------|------------------|
All files         |   71.43|      100|    33.33|    83.33|                  |
 getJSON.js       |   33.33|      100|        0|       50|                 2|
 getTemperature.js|     100|      100|      100|      100|                  |
------------------|--------|---------|---------|---------|------------------|
Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        1.508s
Ran all test suites matching /getTemperature/i.</pre>

<p>Running our test gave us 100% code coverage for the module we were
testing, which is exactly what we wanted. It only gave us partial
coverage of <code>getJSON()</code>, but we mocked that module and were not trying
to test it, so that is expected.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.4 Package Management with npm"><div class="sect1" id="packagemanagers">
<h1>17.4 Package Management with npm</h1>

<p>In<a data-type="indexterm" data-primary="tools and extensions" data-secondary="package management with npm" id="idm46198482384152"/><a data-type="indexterm" data-primary="npm package manager" id="idm46198482383080"/><a data-type="indexterm" data-primary="package manager (Node)" id="idm46198482382408"/> modern software development, it is common for any nontrivial
program that you write to depend on third-party software libraries. If
you’re writing a web server in Node, for example, you might be using
the Express framework. And if you’re creating a user interface to be
displayed in a web browser, you might use a frontend framework like
React or LitElement or Angular. A package manager makes it easy to
find and install third-party packages like these. Just as importantly,
a package manager keeps track of what packages your code depends on
and saves this information into a file so that when someone else wants
to try your program, they can download your code and your list of
dependencies, then use their own package manager to install all the
third-party packages that your code needs.</p>

<p>npm is the package manager that is bundled with Node, and was
introduced in <a data-type="xref" href="ch16.xhtml#npm">§16.1.5</a>. It is just as useful for client-side JavaScript
programming as it is for server-side programming with Node, however.</p>

<p>If you are trying out someone else’s JavaScript project, then one of
the first things you will often do after downloading their code is to
type <code>npm install</code>. This reads the dependencies listed in the
<em>package.json</em> file and downloads the third-party packages
that the project needs and saves them in a <em>node_modules/</em> directory.</p>

<p>You can also type <code>npm install &lt;package-name&gt;</code> to install a particular
package to your project’s <em>node_modules/</em> directory:</p>

<pre data-type="programlisting">$ npm install express</pre>

<p>In addition to installing the named package, npm also makes a record
of the dependency in the <em>package.json</em> file
for the project. Recording dependencies in this way is what allows
others to install those dependencies simply by typing <code>npm install</code>.</p>

<p>The other kind of dependency is on developer tools that are needed by
developers who want to work on your project, but aren’t actually
needed to run the code. If a project uses Prettier, for example, to
ensure that all of its code is consistently formatted, then Prettier is
a “dev dependency,” and you can install and record one of these with
<code>--save-dev</code>:</p>

<pre data-type="programlisting">$ npm install --save-dev prettier</pre>

<p>Sometimes you might want to install developer tools globally so that
they are accessible anywhere even for code that is not part of a formal
project with a <em>package.json</em> file and a <em>node_modules/</em> directory. For
that you can use the <code>-g</code> (for global) option:</p>

<pre data-type="programlisting">$ npm install -g eslint jest
/usr/local/bin/eslint -&gt; /usr/local/lib/node_modules/eslint/bin/eslint.js
/usr/local/bin/jest -&gt; /usr/local/lib/node_modules/jest/bin/jest.js
+ jest@24.9.0
+ eslint@6.7.2
added 653 packages from 414 contributors in 25.596s

$ which eslint
/usr/local/bin/eslint
$ which jest
/usr/local/bin/jest</pre>

<p>In addition to the “install” command, npm supports “uninstall” and
“update” commands, which do what their names say. npm also has an
interesting “audit” command that you can use to find and fix security
vulnerabilities in your dependencies:</p>

<pre data-type="programlisting">$ npm audit --fix

                       === npm audit security report ===

found 0 vulnerabilities
 in 876354 scanned packages</pre>

<p>When you install a tool like ESLint locally for a project, the eslint
script winds up in <em>./node_modules/.bin/eslint</em>, which makes the
command awkward to run. Fortunately, npm is bundled with a command
known as “npx,” which you can use to run locally installed tools with
commands like <code>npx eslint</code> or <code>npx jest</code>. (And if you use npx to
invoke a tool that has not been installed yet, it will install it for
you.)</p>

<p>The company behind npm also maintains the <a href="https://npmjs.com"><em class="hyperlink">https://npmjs.com</em></a> package
repository, which holds hundreds of thousands of open source
packages. But you don’t have to use the npm package manager to access
this repository of packages. Alternatives include
<a href="https://yarnpkg.com">yarn</a> and <a href="https://pnpm.js.org">pnpm</a>.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.5 Code Bundling"><div class="sect1" id="webpack">
<h1>17.5 Code Bundling</h1>

<p>If<a data-type="indexterm" data-primary="tools and extensions" data-secondary="code bundling" id="idm46198482360072"/><a data-type="indexterm" data-primary="code bundling" id="idm46198482359064"/> you are writing a large JavaScript program to run in web browsers,
you will probably want to use a code-bundling tool, especially if you
use external libraries that are delivered as modules. Web developers
have been using ES6 modules (<a data-type="xref" href="ch10.xhtml#es6modules">§10.3</a>) for years, since well
before the <code>import</code> and <code>export</code> keywords were supported on the
web. In order to do this, programmers use a code-bundler tool that
starts at the main entry point (or entry points) of the program and
follows the tree of <code>import</code> directives to find all modules that the
program depends on. It then combines all of those individual module
files into a single bundle of JavaScript code and rewrites the
<code>import</code> and <code>export</code> directives to make the code work in this new
form. The result is a single file of code that can be loaded into a
web browser that does not support modules.</p>

<p>ES6 modules are nearly universally supported by web browsers today,
but web developers still tend to use code bundlers, at least when
releasing production code. Developers find that user experience is
best when a single medium-sized bundle of code is loaded when a user
first visits a website than when many small modules are loaded.</p>
<div data-type="note" epub:type="note"><h6>Note</h6>
<p>Web
performance is a notoriously tricky topic and there are lots of
variables to consider, including ongoing improvements by browser
vendors, so the only way to be sure of the fastest way to load your
code is by testing thoroughly and measuring carefully. Keep in mind
that there is one variable that is completely under your control: code
size. Less JavaScript code will always load and run faster than more
JavaScript code!</p>
</div>

<p>There are a number of good JavaScript bundler tools
available. Commonly used bundlers include <a href="https://webpack.js.org">webpack</a>, <a href="https://rollupjs.org/guide/en">Rollup</a> and
<a href="https://parceljs.org">Parcel</a>. The basic features of bundlers are more or less the same, and
they are differentiated based on how configurable they are or how easy they are to use. Webpack has been around for a long time, has a large ecosystem of
plug-ins, is highly configurable, and can support older nonmodule
libraries. But it can also be complex and hard to configure. At the
other end of the spectrum is Parcel which is intended as a
zero-configuration alternative that simply does the right thing.</p>

<p>In addition to performing basic bundling, bundler tools can also
provide some additional features:</p>

<ul>
<li>
<p>Some programs have more than one entry point. A web application with
multiple pages, for example, could be written with a different entry
point for each page. Bundlers generally allow you to create one
bundle per entry point or to create a single bundle that supports
multiple entry points.</p>
</li>
<li>
<p>Programs can use <code>import()</code> in its functional form (<a data-type="xref" href="ch10.xhtml#dynamicimports">§10.3.6</a>)
instead of its static form to dynamically load modules when they are
actually needed rather than statically loading them at program
startup time. Doing this is often a good way to improve the startup
time for your program. Bundler tools that support <code>import()</code> may be
able to produce multiple output bundles: one to load at startup
time, and one or more that are loaded dynamically when needed. This
can work well if there are only a few calls to <code>import()</code> in your
program and they load  modules with relatively disjoint sets of
dependencies. If the dynamically loaded modules share dependencies
then it becomes tricky to figure out how many bundles to produce,
and you are likely to have to manually configure your bundler to
sort this out.</p>
</li>
<li>
<p>Bundlers can generally output a <em>source map</em> file that defines a
mapping between the lines of code in the bundle and the
corresponding lines in the original source files. This allows
browser developer tools to automatically display JavaScript errors
at their original unbundled locations.</p>
</li>
<li>
<p>Sometimes when you import a module into your program, you only use a
few of its features. A good bundler tool can analyze the code to
determine which parts are unused and can be omitted from the
bundles. This feature goes by the whimsical name of “tree-shaking.”</p>
</li>
<li>
<p>Bundlers typically have a plug-in–based architecture and support
plug-ins that allow importing and bundling “modules” that are not
actually files of JavaScript code. Suppose that your program
includes a large JSON-compatible data structure. Code bundlers can
be configured to allow you to move that data structure into a
separate JSON file and then import it into your program with a
declaration like <code>import widgets from
"./big-widget-list.json"</code>. Similarly, web developers who embed CSS
into their JavaScript programs can use bundler plug-ins that allow
them to import CSS files with an <code>import</code> directive. Note, however,
that if you import anything other than a JavaScript file, you are
using a nonstandard JavaScript extension and making your code
dependent on the bundler tool.</p>
</li>
<li>
<p>In a language like JavaScript that does not require compilation,
running a bundler tool feels like a compilation step, and it is
frustrating to have to run a bundler after every code edit before
you can run the code in your browser. Bundlers typically support
filesystem watchers that detect edits to any files in a
project directory and automatically regenerate the necessary
bundles. With this feature in place you can typically save your code
and then immediately reload your web browser window to try it out.</p>
</li>
<li>
<p>Some bundlers also support a “hot module replacement” mode for
developers where each time a bundle is regenerated, it is
automatically loaded into the browser. When this works, it is a
magical experience for developers, but there are some tricks going
on under the hood to make it work, and it is not suitable for all
projects.</p>
</li>
</ul>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.6 Transpilation with Babel"><div class="sect1" id="babel">
<h1>17.6 Transpilation with Babel</h1>

<p><a href="https://babeljs.io">Babel</a> is<a data-type="indexterm" data-primary="tools and extensions" data-secondary="transpilation with Babel" id="idm46198482332920"/><a data-type="indexterm" data-primary="Babel" id="idm46198482331896"/><a data-type="indexterm" data-primary="transpilation" id="idm46198482331224"/> a tool that compiles JavaScript written
using modern language features into JavaScript that does not use those
modern language features. Because it compiles JavaScript to JavaScript,
Babel is sometimes called a “transpiler.” Babel<a data-type="indexterm" data-primary="ES5" data-secondary="transpilation with Babel" id="idm46198482330168"/> was created so that
web developers could use the new language features of ES6 and later
while still targeting web browsers that only supported ES5.</p>

<p>Language features such as the <code>**</code> exponentiation operator and arrow
functions can be transformed relatively easily into <code>Math.pow()</code> and
<code>function</code> expressions. Other language features, such as the <code>class</code>
keyword, require much more complex transformations, and, in general,
the code output by Babel is not meant to be human readable. Like
bundler tools, however, Babel can produce source maps that map
transformed code locations back to their original source locations, and
this helps dramatically when working with transformed code.</p>

<p>Browser vendors are doing a better job of keeping up with the
evolution of the JavaScript language, and there is much less need
today to compile away arrow functions and class declarations. Babel
can still help when you want to use the very latest features like
underscore separators in numeric literals.</p>

<p>Like most of the other tools described in this chapter, you can
install Babel with npm and run it with npx. Babel reads a <em>.babelrc</em>
configuration file that tells it how you would like your JavaScript
code transformed. Babel defines “presets” that you can choose from
depending on which language extensions you want to use and how
aggressively you want to transform standard language features. One of
Babel’s 
<span class="keep-together">interesting</span> presets is for code compression by minification
(stripping comments and whitespace, renaming variables, and so on).</p>

<p>If you use Babel and a code-bundling tool, you may be able to set up
the code bundler to automatically run Babel on your JavaScript files
as it builds the bundle for you. If so, this can be a convenient option
because it simplifies the process of producing runnable code. Webpack,
for example, supports a “babel-loader” module that you can install and
configure to run Babel on each JavaScript module as it is bundled up.</p>

<p>Even though there is less need to transform the core JavaScript
language today, Babel is still commonly used to support nonstandard
extensions to the language, and we’ll describe two of these language
extensions in the sections that follow.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.7 JSX: Markup Expressions in JavaScript"><div class="sect1" id="jsx">
<h1>17.7 JSX: Markup Expressions in JavaScript</h1>

<p>JSX<a data-type="indexterm" data-primary="tools and extensions" data-secondary="JSX language extension" id="TEjsx17"/><a data-type="indexterm" data-primary="JSX language extension" id="JSX17"/><a data-type="indexterm" data-primary="React" id="idm46198482317544"/> is an extension to core JavaScript that uses HTML-style syntax
to define a tree of elements. JSX is most closely associated with
the React framework for user interfaces on the web. In React, the trees of
elements defined with JSX are ultimately rendered into a web browser
as HTML. Even if you have no plans to use React yourself, its
popularity means that you are likely to see code that uses JSX. This
section explains what you need to know to make sense of of it. (This
section is about the JSX language extension, not about React, and it
explains only enough of React to provide context for the JSX syntax.)</p>

<p>You can think of a JSX element as a new type of JavaScript expression
syntax. JavaScript string literals are delimited with quotation
marks, and regular expression literals are delimited with slashes. In
the same way, JSX expression literals are delimited with angle
brackets. Here is a very simple one:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">line</code> <code class="o">=</code> <code class="o">&lt;</code><code class="nx">hr</code><code class="o">/&gt;</code><code class="p">;</code></pre>

<p>If you use JSX, you will need to use Babel (or a similar tool) to
compile JSX expressions into regular JavaScript. The transformation is
simple enough that some developers choose to use React without using
JSX. Babel transforms the JSX expression in this assignment statement into a simple function call:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">line</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"hr"</code><code class="p">,</code> <code class="kc">null</code><code class="p">);</code></pre>

<p>JSX syntax is HTML-like, and like HTML elements, React elements can
have attributes like these:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">image</code> <code class="o">=</code> <code class="o">&lt;</code><code class="nx">img</code> <code class="nx">src</code><code class="o">=</code><code class="s2">"logo.png"</code> <code class="nx">alt</code><code class="o">=</code><code class="s2">"The JSX logo"</code> <code class="nx">hidden</code><code class="o">/&gt;</code><code class="p">;</code></pre>

<p>When an element has one or more attributes, they become properties of
an object passed as the second argument to <code>createElement()</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">image</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"img"</code><code class="p">,</code> <code class="p">{</code>
              <code class="nx">src</code><code class="o">:</code> <code class="s2">"logo.png"</code><code class="p">,</code>
              <code class="nx">alt</code><code class="o">:</code> <code class="s2">"The JSX logo"</code><code class="p">,</code>
              <code class="nx">hidden</code><code class="o">:</code> <code class="kc">true</code>
            <code class="p">});</code></pre>

<p>Like HTML elements, JSX elements can have strings and other elements
as children. Just as JavaScript’s arithmetic operators can be used to
write arithmetic expressions of arbitrary complexity, JSX elements can
also be nested arbitrarily deeply to create trees of elements:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">sidebar</code> <code class="o">=</code> <code class="p">(</code>
  <code class="o">&lt;</code><code class="nx">div</code> <code class="nx">className</code><code class="o">=</code><code class="s2">"sidebar"</code><code class="o">&gt;</code>
    <code class="o">&lt;</code><code class="nx">h1</code><code class="o">&gt;</code><code class="nx">Title</code><code class="o">&lt;</code><code class="err">/h1&gt;</code>
    <code class="o">&lt;</code><code class="nx">hr</code><code class="o">/&gt;</code>
    <code class="o">&lt;</code><code class="nx">p</code><code class="o">&gt;</code><code class="nx">This</code> <code class="nx">is</code> <code class="nx">the</code> <code class="nx">sidebar</code> <code class="nx">content</code><code class="o">&lt;</code><code class="err">/p&gt;</code>
  <code class="o">&lt;</code><code class="err">/div&gt;</code>
<code class="p">);</code></pre>

<p>Regular JavaScript function call expressions can also be nested
arbitrarily deeply, and these nested JSX expressions translate into a
set of nested <code>createElement()</code> calls. When an JSX element has
children, those children (which are typically strings and other JSX
elements) are passed as the third and subsequent arguments:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">sidebar</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code>
    <code class="s2">"div"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">className</code><code class="o">:</code> <code class="s2">"sidebar"</code><code class="p">},</code>  <code class="c1">// This outer call creates a &lt;div&gt;</code>
    <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"h1"</code><code class="p">,</code> <code class="kc">null</code><code class="p">,</code>  <code class="c1">// This is the first child of the &lt;div/&gt;</code>
                        <code class="s2">"Title"</code><code class="p">),</code>    <code class="c1">// and its own first child.</code>
    <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"hr"</code><code class="p">,</code> <code class="kc">null</code><code class="p">),</code> <code class="c1">// The second child of the &lt;div/&gt;.</code>
    <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"p"</code><code class="p">,</code> <code class="kc">null</code><code class="p">,</code>   <code class="c1">// And the third child.</code>
                        <code class="s2">"This is the sidebar content"</code><code class="p">));</code></pre>

<p>The value returned by <code>React.createElement()</code> is an ordinary
JavaScript object that is used by React to render output in a browser
window. Since this section is about the JSX syntax and not about
React, we’re not going to go into any detail about the returned Element
objects or the rendering process. It is worth noting that you can
configure Babel to compile JSX elements to invocations of a different
function, so if you think that JSX syntax would be a useful way to
express other kinds of nested data structures, you can adopt it for
your own non-React uses.</p>

<p>An important feature of JSX syntax is that you can embed regular
JavaScript expressions within JSX expressions. Within a JSX
expression, text within curly braces is interpreted as plain
JavaScript. These nested expressions are allowed as attribute values
and as child elements. For example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">sidebar</code><code class="p">(</code><code class="nx">className</code><code class="p">,</code> <code class="nx">title</code><code class="p">,</code> <code class="nx">content</code><code class="p">,</code> <code class="nx">drawLine</code><code class="o">=</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
  <code class="k">return</code> <code class="p">(</code>
    <code class="o">&lt;</code><code class="nx">div</code> <code class="nx">className</code><code class="o">=</code><code class="p">{</code><code class="nx">className</code><code class="p">}</code><code class="o">&gt;</code>
      <code class="o">&lt;</code><code class="nx">h1</code><code class="o">&gt;</code><code class="p">{</code><code class="nx">title</code><code class="p">}</code><code class="o">&lt;</code><code class="err">/h1&gt;</code>
      <code class="p">{</code> <code class="nx">drawLine</code> <code class="o">&amp;&amp;</code> <code class="o">&lt;</code><code class="nx">hr</code><code class="o">/&gt;</code> <code class="p">}</code>
      <code class="o">&lt;</code><code class="nx">p</code><code class="o">&gt;</code><code class="p">{</code><code class="nx">content</code><code class="p">}</code><code class="o">&lt;</code><code class="err">/p&gt;</code>
    <code class="o">&lt;</code><code class="err">/div&gt;</code>
  <code class="p">);</code>
<code class="p">}</code></pre>

<p>The <code>sidebar()</code> function returns a JSX element. It takes four
arguments that it uses within the JSX element. The curly brace syntax
may remind you of template literals that use <code>${}</code> to include
JavaScript expressions within strings. Since we know that JSX
expressions compile into function invocations, it should not be
surprising that arbitrary JavaScript expressions can be included
because function invocations can be written with arbitrary
expressions as well. This example code is translated by Babel into the following:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">sidebar</code><code class="p">(</code><code class="nx">className</code><code class="p">,</code> <code class="nx">title</code><code class="p">,</code> <code class="nx">content</code><code class="p">,</code> <code class="nx">drawLine</code><code class="o">=</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
  <code class="k">return</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"div"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">className</code><code class="o">:</code> <code class="nx">className</code> <code class="p">},</code>
                             <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"h1"</code><code class="p">,</code> <code class="kc">null</code><code class="p">,</code> <code class="nx">title</code><code class="p">),</code>
                             <code class="nx">drawLine</code> <code class="o">&amp;&amp;</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"hr"</code><code class="p">,</code> <code class="kc">null</code><code class="p">),</code>
                             <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"p"</code><code class="p">,</code> <code class="kc">null</code><code class="p">,</code> <code class="nx">content</code><code class="p">));</code>
<code class="p">}</code></pre>

<p>This code is easy to read and understand: the curly braces are gone
and the resulting code passes the incoming function parameters to
<code>React.createElement()</code> in a natural way. Note the neat trick that
we’ve done here with the <code>drawLine</code> parameter and the
short-circuiting <code>&amp;&amp;</code> operator. If you call <code>sidebar()</code> with only
three arguments, then <code>drawLine</code> defaults to <code>true</code>, and the fourth
argument to the outer <code>createElement()</code> call is the <code>&lt;hr/&gt;</code>
element. But if you pass <code>false</code> as the fourth argument to
<code>sidebar()</code>, then the fourth argument to the outer <code>createElement()</code>
call evaluates to <code>false</code>, and no <code>&lt;hr/&gt;</code> element is ever
created. This use of the <code>&amp;&amp;</code> operator is a common idiom in JSX to
conditionally include or exclude a child element depending on the
value of some other expression. (This idiom works with React because
React simply ignores children that are <code>false</code> or <code>null</code> and does not
produce any output for them.)</p>

<p>When you use JavaScript expressions within JSX expressions, you are not
limited to simple values like the string and boolean values in the
preceding example. Any JavaScript value is allowed. In fact, it is quite
common in React programming to use objects, arrays, and
functions. Consider the following function, for example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Given an array of strings and a callback function return a JSX element</code>
<code class="c1">// representing an HTML &lt;ul&gt; list with an array of &lt;li&gt; elements as its child.</code>
<code class="kd">function</code> <code class="nx">list</code><code class="p">(</code><code class="nx">items</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
  <code class="k">return</code> <code class="p">(</code>
    <code class="o">&lt;</code><code class="nx">ul</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code> <code class="p">{</code><code class="nx">padding</code><code class="o">:</code><code class="mi">10</code><code class="p">,</code> <code class="nx">border</code><code class="o">:</code><code class="s2">"solid red 4px"</code><code class="p">}</code> <code class="p">}</code><code class="o">&gt;</code>
      <code class="p">{</code><code class="nx">items</code><code class="p">.</code><code class="nx">map</code><code class="p">((</code><code class="nx">item</code><code class="p">,</code><code class="nx">index</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="o">&lt;</code><code class="nx">li</code> <code class="nx">onClick</code><code class="o">=</code><code class="p">{()</code> <code class="o">=&gt;</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">index</code><code class="p">)}</code> <code class="nx">key</code><code class="o">=</code><code class="p">{</code><code class="nx">index</code><code class="p">}</code><code class="o">&gt;</code><code class="p">{</code><code class="nx">item</code><code class="p">}</code><code class="o">&lt;</code><code class="err">/li&gt;</code>
      <code class="p">})}</code>
    <code class="o">&lt;</code><code class="err">/ul&gt;</code>
  <code class="p">);</code>
<code class="p">}</code></pre>

<p>This function uses an object literal as the value of the <code>style</code>
attribute on the <code>&lt;ul&gt;</code> element. (Note that double curly braces are
required here.) The <code>&lt;ul&gt;</code> element has a single child, but the value
of that child is an array. The child array is the array created by
using the <code>map()</code> function on the input array to create an array of
<code>&lt;li&gt;</code> elements. (This works with React because the React library
flattens the children of an element when it renders them. An element
with one array child is the same as that element with each of those
array elements as children.) Finally, note that each of the nested
<code>&lt;li&gt;</code> elements has an <code>onClick</code> event handler attribute whose value
is an arrow function. The JSX code compiles to the following
pure JavaScript code (which I have formatted with Prettier):</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">list</code><code class="p">(</code><code class="nx">items</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
  <code class="k">return</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code>
    <code class="s2">"ul"</code><code class="p">,</code>
    <code class="p">{</code> <code class="nx">style</code><code class="o">:</code> <code class="p">{</code> <code class="nx">padding</code><code class="o">:</code> <code class="mi">10</code><code class="p">,</code> <code class="nx">border</code><code class="o">:</code> <code class="s2">"solid red 4px"</code> <code class="p">}</code> <code class="p">},</code>
    <code class="nx">items</code><code class="p">.</code><code class="nx">map</code><code class="p">((</code><code class="nx">item</code><code class="p">,</code> <code class="nx">index</code><code class="p">)</code> <code class="o">=&gt;</code>
      <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code>
        <code class="s2">"li"</code><code class="p">,</code>
        <code class="p">{</code> <code class="nx">onClick</code><code class="o">:</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">index</code><code class="p">),</code> <code class="nx">key</code><code class="o">:</code> <code class="nx">index</code> <code class="p">},</code>
        <code class="nx">item</code>
      <code class="p">)</code>
    <code class="p">)</code>
  <code class="p">);</code>
<code class="p">}</code></pre>

<p>One other use of object expressions in JSX is with the object spread
operator (<a data-type="xref" href="ch06.xhtml#object-spread-operator">§6.10.4</a>) to specify multiple attributes
at once. Suppose that you find yourself writing a lot of JSX
expressions that repeat a common set of attributes. You can simplify
your expressions by defining the attributes as properties of an object
and “spreading them into” your JSX elements:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">hebrew</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">lang</code><code class="o">:</code> <code class="s2">"he"</code><code class="p">,</code> <code class="nx">dir</code><code class="o">:</code> <code class="s2">"rtl"</code> <code class="p">};</code> <code class="c1">// Specify language and direction</code>
<code class="kd">let</code> <code class="nx">shalom</code> <code class="o">=</code> <code class="o">&lt;</code><code class="nx">span</code> <code class="nx">className</code><code class="o">=</code><code class="s2">"emphasis"</code> <code class="p">{...</code><code class="nx">hebrew</code><code class="p">}</code><code class="o">&gt;</code><code class="nx">שלום</code><code class="o">&lt;</code><code class="err">/span&gt;;</code></pre>

<p>Babel compiles this to use an <code>_extends()</code> function (omitted here)
that combines that <code>className</code> attribute with the attributes contained
in the <code>hebrew</code> object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">shalom</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"span"</code><code class="p">,</code>
                                 <code class="nx">_extends</code><code class="p">({</code><code class="nx">className</code><code class="o">:</code> <code class="s2">"emphasis"</code><code class="p">},</code> <code class="nx">hebrew</code><code class="p">),</code>
                                 <code class="s2">"\u05E9\u05DC\u05D5\u05DD"</code><code class="p">);</code></pre>

<p>Finally, there is one more important feature of JSX that we have not
covered yet. As you’ve seen, all JSX elements begin with an identifier
immediately after the opening angle bracket. If the first letter of
this identifier is lowercase (as it has been in all of the examples
here), then the identifier is passed to <code>createElement()</code> as a
string. But if the first letter of the identifier is uppercase, then
it is treated as an actual identifer, and it is the JavaScript value
of that identifier that is passed as the first argument to
<code>createElement()</code>. This means that the JSX expression <code>&lt;Math/&gt;</code>
compiles to JavaScript code that passes the global Math object to
<code>React.createElement()</code>.</p>

<p>For React, this ability to pass non-string values as the first
argument to <code>createElement()</code> enables the creation of <em>components</em>. A
component is a way of writing a simple JSX expression (with an
uppercase component name) that represents a more complex expression
(using lowercase HTML tag names).</p>

<p>The simplest way to define a new component in React is to write a
function that takes a “props object” as its argument and returns a JSX
expression. A <em>props object</em> is simply a JavaScript object that
represents attribute values, like the objects that are passed as the
second argument to <code>createElement()</code>. Here, for example, is another
take on our <code>sidebar()</code> function:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">Sidebar</code><code class="p">(</code><code class="nx">props</code><code class="p">)</code> <code class="p">{</code>
  <code class="k">return</code> <code class="p">(</code>
    <code class="o">&lt;</code><code class="nx">div</code><code class="o">&gt;</code>
      <code class="o">&lt;</code><code class="nx">h1</code><code class="o">&gt;</code><code class="p">{</code><code class="nx">props</code><code class="p">.</code><code class="nx">title</code><code class="p">}</code><code class="o">&lt;</code><code class="err">/h1&gt;</code>
      <code class="p">{</code> <code class="nx">props</code><code class="p">.</code><code class="nx">drawLine</code> <code class="o">&amp;&amp;</code> <code class="o">&lt;</code><code class="nx">hr</code><code class="o">/&gt;</code> <code class="p">}</code>
      <code class="o">&lt;</code><code class="nx">p</code><code class="o">&gt;</code><code class="p">{</code><code class="nx">props</code><code class="p">.</code><code class="nx">content</code><code class="p">}</code><code class="o">&lt;</code><code class="err">/p&gt;</code>
    <code class="o">&lt;</code><code class="err">/div&gt;</code>
  <code class="p">);</code>
<code class="p">}</code></pre>

<p>This new <code>Sidebar()</code> function is a lot like the earlier <code>sidebar()</code>
function. But this one has a name that begins with a capital letter
and takes a single object argument instead of separate arguments. This
makes it a React component and means that it can be used in place of
an HTML tag name in JSX expressions:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">sidebar</code> <code class="o">=</code> <code class="o">&lt;</code><code class="nx">Sidebar</code> <code class="nx">title</code><code class="o">=</code><code class="s2">"Something snappy"</code> <code class="nx">content</code><code class="o">=</code><code class="s2">"Something wise"</code><code class="o">/&gt;</code><code class="p">;</code></pre>

<p>This <code>&lt;Sidebar/&gt;</code> element compiles like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">sidebar</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">Sidebar</code><code class="p">,</code> <code class="p">{</code>
  <code class="nx">title</code><code class="o">:</code> <code class="s2">"Something snappy"</code><code class="p">,</code>
  <code class="nx">content</code><code class="o">:</code> <code class="s2">"Something wise"</code>
<code class="p">});</code></pre>

<p>It is a simple JSX expression, but when React renders it, it will pass
the second argument (the Props object) to the first argument (the
<code>Sidebar()</code> function) and will use the JSX expression returned by that
function in place of the <code>&lt;Sidebar&gt;</code> expression.<a data-type="indexterm" data-primary="" data-startref="JSX17" id="idm46198481378968"/><a data-type="indexterm" data-primary="" data-startref="TEjsx17" id="idm46198481378168"/></p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="17.8 Type Checking with Flow"><div class="sect1" id="flow">
<h1>17.8 Type Checking with Flow</h1>

<p><a href="https://flow.org">Flow</a> is<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" id="TEflow17"/><a data-type="indexterm" data-primary="type checking" id="typecheck17"/><a data-type="indexterm" data-primary="Flow language extension" id="Flow17"/><a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="overview of" id="idm46198481332520"/><a data-type="indexterm" data-primary="type checking" data-secondary="overview of" id="idm46198481331304"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="overview of" id="idm46198481330360"/> a language extension that allows you to
annotate your JavaScript code with type
information, and a tool for checking your JavaScript code
(both annotated and unannotated) for type errors. To use Flow, you
start writing code using the Flow language extension to add type
annotations. Then you run the Flow tool to analyze your code and
report type errors. Once you have fixed the errors and are ready to
run the code, you use Babel (perhaps automatically as part of the code-bundling process) to strip the Flow type annotations out of your
code. (One of the nice things about the Flow language extension is
that there isn’t any new syntax that Flow has to compile or
transform. You use the Flow language extension to add 
<span class="keep-together">annotations</span> to
the code, and all Babel has to do is to strip those annotations out to
return your code to standard JavaScript.)</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198481327768">
<h5>TypeScript Versus Flow</h5>
<p>TypeScript<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="TypeScript versus Flow" id="idm46198481326200"/><a data-type="indexterm" data-primary="type checking" data-secondary="TypeScript versus Flow" id="idm46198481324920"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="TypeScript versus Flow" id="idm46198481323976"/><a data-type="indexterm" data-primary="TypeScript" id="idm46198481323032"/> is a very popular alternative to Flow. TypeScript is an
extension of JavaScript that adds types as well as other language
features. The TypeScript compiler “tsc” compiles TypeScript programs
into JavaScript programs and in the process analyzes them and reports
type errors in much the same the way that Flow does. tsc is not a
Babel plugin: it is its own standalone compiler.</p>

<p>Simple type annotations in TypeScript are usually written identically
to the same annotations in Flow. For more advanced typing, the syntax
of the two extensions diverges, but the intent and value of the two
extensions is the same. My goal in this section is to explain the
benefits of type annotations and static code analysis. I’ll be doing
that with examples based on Flow, but everything demonstrated here can
also be achieved with TypeScript with relatively simple syntax changes.</p>

<p>TypeScript was released in 2012, before ES6, when JavaScript did not
have a <code>class</code> keyword or a <code>for/of</code> loop or modules or Promises. Flow
is a narrow language extension that adds type annotations to
JavaScript and nothing else. TypeScript, by contrast, was very much
designed as a new language. As its name implies, adding types to
JavaScript is the primary purpose of TypeScript, and it is the reason
that people use it today. But types are not the only feature that
TypeScript adds to JavaScript: the TypeScript language has <code>enum</code>
and <code>namespace</code> keywords that simply do not exist in
JavaScript. In 2020, TypeScript has better integration with IDEs and
code editors (particularly VSCode, which, like TypeScript, is from
Microsoft) than Flow does.</p>

<p>Ultimately, this is a book about JavaScript, and I’m covering Flow
here instead of TypeScript because I don’t want to take the focus off
of JavaScript. But everything you learn here about adding types to
JavaScript will be helpful to you if you decide to adopt TypeScript
for your projects.</p>
</div></aside>

<p>Using Flow requires commitment, but I have found that for medium and
large projects, the extra effort is worth it. It takes extra time to
add type annotations to your code, to run Flow every time you edit the
code, and to fix the type errors it reports. But in return Flow will
enforce good coding discipline and will not allow you to cut corners
that can lead to bugs. When I have worked on projects that use
Flow, I have been impressed by the number of errors it found in my own
code. Being able to fix those issues before they became bugs is a
great feeling and gives me extra confidence that my code is
correct.</p>

<p>When I first started using Flow, I found that it was sometimes
difficult to understand why it was complaining about my code. With
some practice, though, I came to understand its error messages and
found that it was usually easy to make minor changes to my code to
make it safer and to satisfy Flow.<sup><a data-type="noteref" id="idm46198481315640-marker" href="ch17.xhtml#idm46198481315640">1</a></sup> I do not recommend
using Flow if you still feel like you are learning JavaScript
itself. But once you are confident with the language, adding Flow to
your JavaScript projects will push you to take your programming skills
to the next level. And this, really, is why I’m dedicating the last
section of this book to a Flow tutorial: because learning about
JavaScript type systems offers a glimpse of another level, or another
style, of programming.</p>

<p>This section is a tutorial, and it does not attempt to cover Flow
comprehensively. If you decide to try Flow, you will almost certainly
end up spending time reading the documentation at <a href="https://flow.org"><em class="hyperlink">https://flow.org</em></a>. On
the other hand, you do not need to master the Flow type system before
you can start making practical use of it in your projects: the simple
uses of Flow described here will take you a long way.</p>








<section data-type="sect2" data-pdf-bookmark="17.8.1 Installing and Running Flow"><div class="sect2" id="idm46198481287608">
<h2>17.8.1 Installing and Running Flow</h2>

<p>Like<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="installing and running" id="idm46198481286040"/><a data-type="indexterm" data-primary="type checking" data-secondary="installing and running Flow" id="idm46198481284536"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="installing and running" id="idm46198481283656"/> the other tools described in this chapter, you can install the
Flow type-checking tool using a package manager, with a command like
<code>npm install -g flow-bin</code> or <code>npm install --save-dev flow-bin</code>. If you
install the tool globally with <code>-g</code>, then you can run it with
<code>flow</code>. And if you install it locally in your project with
<code>--save-dev</code>, then you can run it with <code>npx flow</code>. Before using Flow
to do type checking, the first time run it as <code>flow --init</code> in the root
directory of your project to create a <code>.flowconfig</code> configuration
file. You may never need to add anything to this file, but Flow needs
it to know where your project root is.</p>

<p>When you run Flow, it will find all the JavaScript source code in your
project, but it will only report type errors for the files that have
“opted in” to type checking by adding a <code>// @flow</code> comment at the top
of the file. This opt-in behavior is important because it means that
you can adopt Flow for existing projects and then begin to convert
your code one file at a time, without being bothered by errors and
warnings on files that have not yet been converted.</p>

<p>Flow may be able to find errors in your code even if all you do is
opt in with a <code>// @flow</code> comment. Even if you do not use the Flow
language extension and add no type annotations to your code, the Flow
type checker tool can still make inferences about the values in your
program and alert you when you use them inconsistently.</p>

<p>Consider the following Flow error message:</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ variableReassignment.js:6:3

Cannot assign 1 to i.r because:
 • property r is missing in number [1].

     2│ let i = { r: 0, i: 1 };    // The complex number 0+1i
 [1] 3│ for(i = 0; i &lt; 10; i++) {  // Oops! The loop variable overwrites i
     4│     console.log(i);
     5│ }
     6│ i.r = 1;                   // Flow detects the error here</pre>

<p>In this case, we declare the variable <code>i</code> and assign an object to
it. Then we use <code>i</code> again as a loop variable, overwriting the
object. Flow notices this and flags an error when we try to use <code>i</code> as
if it still held an object. (A simple fix would be to write <code>for(let
i = 0;</code> making the loop variable local to the loop.)</p>

<p>Here is another error that Flow detects even without type annotations:</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ size.js:3:14

Cannot get x.length because property length is missing in Number [1].

     1│ // @flow
     2│ function size(x) {
     3│     return x.length;
     4│ }
 [1] 5│ let s = size(1000);</pre>

<p>Flow sees that the <code>size()</code> function takes a single argument. It
doesn’t know the type of that argument, but it can see that the
argument is expected to have a <code>length</code> property. When it sees this
<code>size()</code> function being called with a numeric argument, it correctly
flags this as an error because numbers do not have <code>length</code>
properties.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.2 Using Type Annotations"><div class="sect2" id="idm46198481287016">
<h2>17.8.2 Using Type Annotations</h2>

<p>When<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="using type annotations" id="idm46198481267208"/><a data-type="indexterm" data-primary="type checking" data-secondary="using type annotations" id="idm46198481265928"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="using type annotations" id="idm46198481264984"/> you declare a JavaScript variable, you can add a Flow
type annotation to it by following the variable name with a colon and
the type:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">message</code><code class="o">:</code> <code class="nx">string</code> <code class="o">=</code> <code class="s2">"Hello world"</code><code class="p">;</code>
<code class="kd">let</code> <code class="nx">flag</code><code class="o">:</code> <code class="kr">boolean</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="kd">let</code> <code class="nx">n</code><code class="o">:</code> <code class="nx">number</code> <code class="o">=</code> <code class="mi">42</code><code class="p">;</code></pre>

<p>Flow would know the types of these variables even if you did not
annotate them: it can see what values you assign to each variable, and
it keeps track of that. If you add type annotations, however, Flow
knows both the type of the variable and that you have expressed the
intent that the variable should always be of that type. So if you use
the type annotation, Flow will flag an error if you ever assign a
value of a different type to that variable. Type annotations for
variables are also particularly useful if you tend to declare all your
variables up at the top of a function before they are used.</p>

<p>Type annotations for function arguments are like annotations for
variables: follow the name of the function argument with a colon and
the type name. When annotating a function, you typically also add an
annotation for the return type of the function. This goes between the
close parenthesis and the open curly brace of the function
body. Functions that return nothing use the Flow type <code>void</code>.</p>

<p>In the preceding example we defined a <code>size()</code> function that expected an
argument with a <code>length</code> property. Here’s how we could change that
function to explicitly specify that it expects a string argument and
returns a number. Note, Flow now flags an error if we pass an array to
the function, even though the function would work in that case:</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ size2.js:5:18

Cannot call size with array literal bound to s because array literal [1]
is incompatible with string [2].

 [2] 2│ function size(s: string): number {
     3│     return s.length;
     4│ }
 [1] 5│ console.log(size([1,2,3]));</pre>

<p>Using type annotations with arrow functions is also possible, though
it can turn this normally succinct syntax into something more verbose:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kr">const</code> <code class="nx">size</code> <code class="o">=</code> <code class="p">(</code><code class="nx">s</code><code class="o">:</code> <code class="nx">string</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code></pre>

<p>An important thing to understand about Flow is that the JavaScript
value <code>null</code> has the Flow type <code>null</code> and the JavaScript value
<code>undefined</code> has the Flow type <code>void</code>. But neither of these values is a
member of any other type (unless you explicitly add it). If you
declare a function parameter to be a string, then it must be a string,
and it is an error to pass <code>null</code> or to pass <code>undefined</code> or to omit
the argument (which is basically the same thing as passing
<code>undefined</code>):</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ size3.js:3:18

Cannot call size with null bound to s because null [1] is incompatible
with string [2].

     1│ // @flow
 [2] 2│ const size = (s: string): number =&gt; s.length;
 [1] 3│ console.log(size(null));</pre>

<p>If you want to allow <code>null</code> and <code>undefined</code> as legal values for a
variable or function argument, simply prefix the type with a question
mark. For example, use <code>?string</code> or <code>?number</code> instead of <code>string</code> or
<code>number</code>. If we change our <code>size()</code> function to expect an argument of
type <code>?string</code>, then Flow doesn’t complain when we pass <code>null</code> to the
function. But it now has something else to complain about:</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ size4.js:3:14

Cannot get s.length because property length is missing in null or
undefined [1].

     1│ // @flow
 [1] 2│ function size(s: ?string): number {
     3│     return s.length;
     4│ }
     5│ console.log(size(null));</pre>

<p>What Flow is telling us here is that it is not safe to write
<code>s.length</code> because, at this place in our code, <code>s</code> might be <code>null</code> or
<code>undefined</code>, and those values do not have <code>length</code> properties. This is
where Flow makes sure we do not cut any corners. If a value might be
<code>null</code>, Flow will insist that we check for that case before we do
anything that depends on the value not being <code>null</code>.</p>

<p>In this case, we can fix the issue by changing the body of the
function as follows:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">size</code><code class="p">(</code><code class="nx">s</code><code class="o">:</code> <code class="o">?</code><code class="nx">string</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="c1">// At this point in the code, s could be a string or null or undefined.</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">s</code> <code class="o">===</code> <code class="kc">null</code> <code class="o">||</code> <code class="nx">s</code> <code class="o">===</code> <code class="kc">undefined</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// In this block, Flow knows that s is null or undefined.</code>
        <code class="k">return</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
        <code class="c1">// And in this block, Flow knows that s is a string.</code>
        <code class="k">return</code> <code class="nx">s</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
    <code class="p">}</code>
<code class="p">}</code></pre>

<p>When the function is first called, the parameter can have more than
one type. But by adding type-checking code, we create a block within
the code where Flow knows for sure that the parameter is a
string. When we use <code>s.length</code> within that block, Flow does not
complain. Note that Flow does not require you to write verbose code
like this. Flow would also be satisfied if we just replaced the body
of the <code>size()</code> function with <code>return s ? s.length : -1;</code>.</p>

<p>Flow syntax allows a question mark before any type specification to
indicate that, in addition to the specified type, <code>null</code> and
<code>undefined</code> are allowed as well. Question marks can also appear after
a parameter name to indicate that the parameter itself is optional. So
if we changed the declaration of the parameter <code>s</code> from <code>s: ?string</code>
to <code>s? : string</code>, that would mean it is OK to call <code>size()</code> with no
arguments (or with the value <code>undefined</code>, which is the same as
omitting it), but that if we do call it with a parameter other than
<code>undefined</code>, then that parameter must be a string. In this case, <code>null</code>
is not a legal value.</p>

<p>So far, we’ve discussed primitive types <code>string</code>, <code>number</code>, <code>boolean</code>,
<code>null</code>, and <code>void</code> and have demonstrated how you can use use them with
variable declarations, function parameters, and function return
values. The subsections that follow describe some more complex types
supported by Flow.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.3 Class Types"><div class="sect2" id="idm46198481268280">
<h2>17.8.3 Class Types</h2>

<p>In<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="class types" id="idm46198481107560"/><a data-type="indexterm" data-primary="type checking" data-secondary="class types" id="idm46198481106280"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="class types" id="idm46198481105336"/> addition to the primitive types that Flow knows about, it also
knows about all of JavaScript’s built-in classes and allows you to
use class name as types. The following function, for example, uses
type annotations to indicate that it should be invoked with one Date
object and one RegExp object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// Return true if the ISO representation of the specified date</code>
<code class="c1">// matches the specified pattern, or false otherwise.</code>
<code class="c1">// E.g: const isTodayChristmas = dateMatches(new Date(), /^\d{4}-12-25T/);</code>
<code class="kr">export</code> <code class="kd">function</code> <code class="nx">dateMatches</code><code class="p">(</code><code class="nx">d</code><code class="o">:</code> <code class="nb">Date</code><code class="p">,</code> <code class="nx">p</code><code class="o">:</code> <code class="nb">RegExp</code><code class="p">)</code><code class="o">:</code> <code class="kr">boolean</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nx">p</code><code class="p">.</code><code class="nx">test</code><code class="p">(</code><code class="nx">d</code><code class="p">.</code><code class="nx">toISOString</code><code class="p">());</code>
<code class="p">}</code></pre>

<p>If you define your own classes with the <code>class</code> keyword, those classes
automatically become valid Flow types. In order to make this work,
however, Flow does require you to use type annotations in the
class. In particular, each property of the class must have its type
declared. Here is a simple complex number class that demonstrates this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kr">export</code> <code class="k">default</code> <code class="kr">class</code> <code class="nx">Complex</code> <code class="p">{</code>
    <code class="c1">// Flow requires an extended class syntax that includes type annotations</code>
    <code class="c1">// for each of the properties used by the class.</code>
    <code class="nx">i</code><code class="o">:</code> <code class="nx">number</code><code class="p">;</code>
    <code class="nx">r</code><code class="o">:</code> <code class="nx">number</code><code class="p">;</code>
    <code class="kr">static</code> <code class="nx">i</code><code class="o">:</code> <code class="nx">Complex</code><code class="p">;</code>

    <code class="nx">constructor</code><code class="p">(</code><code class="nx">r</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">i</code><code class="o">:</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Any properties initialized by the constructor must have Flow type</code>
        <code class="c1">// annotations above.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">r</code> <code class="o">=</code> <code class="nx">r</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">i</code> <code class="o">=</code> <code class="nx">i</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="nx">add</code><code class="p">(</code><code class="nx">that</code><code class="o">:</code> <code class="nx">Complex</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">return</code> <code class="k">new</code> <code class="nx">Complex</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">r</code> <code class="o">+</code> <code class="nx">that</code><code class="p">.</code><code class="nx">r</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">that</code><code class="p">.</code><code class="nx">i</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="c1">// This assignment would not be allowed by Flow if there was not a</code>
<code class="c1">// type annotation for i inside the class.</code>
<code class="nx">Complex</code><code class="p">.</code><code class="nx">i</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Complex</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code><code class="mi">1</code><code class="p">);</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.4 Object Types"><div class="sect2" id="idm46198481079896">
<h2>17.8.4 Object Types</h2>

<p>The<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="object types" id="idm46198480920440"/><a data-type="indexterm" data-primary="type checking" data-secondary="object types" id="idm46198480919272"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="object types" id="idm46198480918328"/> Flow type to describe an object looks a lot like an object
literal, except that property values are replaced by property
types. Here, for example, is a function that expects an object with
numeric <code>x</code> and <code>y</code> properties:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// Given an object with numeric x and y properties, return the</code>
<code class="c1">// distance from the origin to the point (x,y) as a number.</code>
<code class="kr">export</code> <code class="k">default</code> <code class="kd">function</code> <code class="nx">distance</code><code class="p">(</code><code class="nx">point</code><code class="o">:</code> <code class="p">{</code><code class="nx">x</code><code class="o">:</code><code class="nx">number</code><code class="p">,</code> <code class="nx">y</code><code class="o">:</code><code class="nx">number</code><code class="p">})</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">hypot</code><code class="p">(</code><code class="nx">point</code><code class="p">.</code><code class="nx">x</code><code class="p">,</code> <code class="nx">point</code><code class="p">.</code><code class="nx">y</code><code class="p">);</code>
<code class="p">}</code></pre>

<p>In this code, the text <code>{x:number, y:number}</code> is a Flow type, just
like <code>string</code> or <code>Date</code> is. As with any type, you can add a question
mark at the front to indicate that <code>null</code> and <code>undefined</code> should also
be allowed.</p>

<p>Within an object type, you can follow any of the property names with a
question mark to indicate that that property is optional and may be
omitted. For example, you might write the type for an object that
represents a 2D or 3D point like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="p">{</code><code class="nx">x</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">y</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">z</code><code class="o">?:</code> <code class="nx">number</code><code class="p">}</code></pre>

<p>If a property is not marked as optional in an object type, then it is
required, and Flow will report an error if an appropriate property is
not present in the actual value. Normally, however, Flow tolerates
extra properties. If you were to pass an object that had a <code>w</code>
property to the <code>distance()</code> function above, Flow would not complain.</p>

<p>If you want Flow to strictly enforce that an object does not have
properties other than those explicitly declared in its type, you can
declare an <em>exact object type</em> by adding vertical bars to the curly
braces:</p>

<pre data-type="programlisting" data-code-language="js"><code class="p">{</code><code class="o">|</code> <code class="nx">x</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">y</code><code class="o">:</code> <code class="nx">number</code> <code class="o">|</code><code class="p">}</code></pre>

<p>JavaScript’s objects are sometimes used as dictionaries or
string-to-value maps. When used like this, the property names are not
known in advance and cannot be declared in a Flow type. If you use
objects this way, you can still use Flow to describe the data
structure. Suppose that you have an object where the properties are
the names of the world’s major cities and the values of those
properties are objects that specify the geographical location of those
cities. You might declare this data structure like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kr">const</code> <code class="nx">cityLocations</code> <code class="o">:</code> <code class="p">{[</code><code class="nx">string</code><code class="p">]</code><code class="o">:</code> <code class="p">{</code><code class="nx">longitude</code><code class="o">:</code><code class="nx">number</code><code class="p">,</code> <code class="nx">latitude</code><code class="o">:</code><code class="nx">number</code><code class="p">}}</code> <code class="o">=</code> <code class="p">{</code>
    <code class="s2">"Seattle"</code><code class="o">:</code> <code class="p">{</code> <code class="nx">longitude</code><code class="o">:</code> <code class="mf">47.6062</code><code class="p">,</code> <code class="nx">latitude</code><code class="o">:</code> <code class="o">-</code><code class="mf">122.3321</code> <code class="p">},</code>
    <code class="c1">// TODO: if there are any other important cities, add them here.</code>
<code class="p">};</code>
<code class="kr">export</code> <code class="k">default</code> <code class="nx">cityLocations</code><code class="p">;</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.5 Type Aliases"><div class="sect2" id="idm46198481079304">
<h2>17.8.5 Type Aliases</h2>

<p>Objects<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="type aliases" id="idm46198480691384"/><a data-type="indexterm" data-primary="type checking" data-secondary="type aliases" id="idm46198480690104"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="type aliases" id="idm46198480689160"/> can have many properties, and the Flow type that describes
such an object will be long and difficult to type. And even relatively
short object types can be confusing because they look so much like
object literals. Once we get beyond simple types like <code>number</code> and
<code>?string</code>, it is often useful to be able to define names for our Flow
types. And in fact, Flow uses the <code>type</code> keyword to do exactly
that. Follow the <code>type</code> keyword with an identifier, an equals sign,
and a Flow type. Once you’ve done that, the identifier will be an
alias for the type. Here, for example, is how we could rewrite the
<code>distance()</code> function from the previous section with an explicitly defined <code>Point</code> type:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">Point</code> <code class="o">=</code> <code class="p">{</code>
    <code class="nx">x</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code>
    <code class="nx">y</code><code class="o">:</code> <code class="nx">number</code>
<code class="p">};</code>

<code class="c1">// Given a Point object return its distance from the origin</code>
<code class="kr">export</code> <code class="k">default</code> <code class="kd">function</code> <code class="nx">distance</code><code class="p">(</code><code class="nx">point</code><code class="o">:</code> <code class="nx">Point</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">hypot</code><code class="p">(</code><code class="nx">point</code><code class="p">.</code><code class="nx">x</code><code class="p">,</code> <code class="nx">point</code><code class="p">.</code><code class="nx">y</code><code class="p">);</code>
<code class="p">}</code></pre>

<p>Note that this code exports the <code>distance()</code> function and also exports
the <code>Point</code> type. Other modules can use <code>import type Point from
'./distance.js'</code> if they want to use that type definition. Keep in
mind, though, that <code>import type</code> is a Flow language extension and not a
real JavaScript import directive. Type imports and exports are used by
the Flow type checker, but like all other Flow language extensions,
they are stripped out of the code before it ever runs.</p>

<p>Finally, it is worth noting that instead of defining a name for a Flow
object type that represents a point, it would probably be simpler and
cleaner to just define a Point class and use that class as the type.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.6 Array Types"><div class="sect2" id="idm46198480654168">
<h2>17.8.6 Array Types</h2>

<p>The<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="array types" id="idm46198480623272"/><a data-type="indexterm" data-primary="type checking" data-secondary="array types" id="idm46198480621992"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="array types" id="idm46198480621048"/> Flow type to describe an array is a compound type that also
includes the type of the array elements. Here, for example, is a
function that expects an array of numbers, and the error that Flow
reports if you try to call the function with an array that has
non-numeric elements:</p>

<pre data-type="programlisting">Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ average.js:8:16

Cannot call average with array literal bound to data because string [1]
is incompatible with number [2] in array element.

 [2]  2│ function average(data: Array&lt;number&gt;) {
      3│     let sum = 0;
      4│     for(let x of data) sum += x;
      5│     return sum/data.length;
      6│ }
      7│
 [1]  8│ average([1, 2, "three"]);</pre>

<p>The Flow type for an array is <code>Array</code> followed by the element type in
angle brackets. You can also express an array type by following the
element type with open and close square brackets. So in this example we could
have written <code>number[]</code> instead of <code>Array&lt;number&gt;</code>. I prefer the angle
bracket notation because, as we’ll see, there are other Flow
types that use this angle-bracket syntax.</p>

<p>The Array type syntax shown  works for arrays with an arbitrary
number of elements, all of which have the same type. Flow has a
different syntax for describing the type of a <em>tuple</em>: an array with a
fixed number of elements, each of which may have a different type.
To express the type of a tuple, simply write the type of each of its
elements, separate them with commas, and enclose them all in square
brackets.</p>

<p>A function that returns an HTTP status code and message might look
like this, for example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">getStatus</code><code class="p">()</code><code class="o">:</code><code class="p">[</code><code class="nx">number</code><code class="p">,</code> <code class="nx">string</code><code class="p">]</code> <code class="p">{</code>
    <code class="k">return</code> <code class="p">[</code><code class="nx">getStatusCode</code><code class="p">(),</code> <code class="nx">getStatusMessage</code><code class="p">()];</code>
<code class="p">}</code></pre>

<p>Functions that return tuples are awkward to work with unless you use
destructuring assignment:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="p">[</code><code class="nx">code</code><code class="p">,</code> <code class="nx">message</code><code class="p">]</code> <code class="o">=</code> <code class="nx">getStatus</code><code class="p">();</code></pre>

<p>Destructuring assignment, plus Flow’s type-aliasing capabilities, make
tuples easy enough to work with that you might consider them as an
alternative to classes for simple datatypes:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">Color</code> <code class="o">=</code> <code class="p">[</code><code class="nx">number</code><code class="p">,</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">number</code><code class="p">];</code>  <code class="c1">// [r, g, b, opacity]</code>

<code class="kd">function</code> <code class="nx">gray</code><code class="p">(</code><code class="nx">level</code><code class="o">:</code> <code class="nx">number</code><code class="p">)</code><code class="o">:</code> <code class="nx">Color</code> <code class="p">{</code>
    <code class="k">return</code> <code class="p">[</code><code class="nx">level</code><code class="p">,</code> <code class="nx">level</code><code class="p">,</code> <code class="nx">level</code><code class="p">,</code> <code class="mi">1</code><code class="p">];</code>
<code class="p">}</code>

<code class="kd">function</code> <code class="nx">fade</code><code class="p">([</code><code class="nx">r</code><code class="p">,</code><code class="nx">g</code><code class="p">,</code><code class="nx">b</code><code class="p">,</code><code class="nx">a</code><code class="p">]</code><code class="o">:</code> <code class="nx">Color</code><code class="p">,</code> <code class="nx">factor</code><code class="o">:</code> <code class="nx">number</code><code class="p">)</code><code class="o">:</code> <code class="nx">Color</code> <code class="p">{</code>
    <code class="k">return</code> <code class="p">[</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">,</code> <code class="nx">a</code><code class="o">/</code><code class="nx">factor</code><code class="p">];</code>
<code class="p">}</code>

<code class="kd">let</code> <code class="p">[</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">,</code> <code class="nx">a</code><code class="p">]</code> <code class="o">=</code> <code class="nx">fade</code><code class="p">(</code><code class="nx">gray</code><code class="p">(</code><code class="mi">75</code><code class="p">),</code> <code class="mi">3</code><code class="p">);</code></pre>

<p>Now that we have a way to express the type of an array, let’s return
to the <code>size()</code> function from earlier and modify it to expect an array
argument instead of a string argument. We want the function to be able
to accept an array of any length, so a tuple type is not
appropriate. But we don’t want to restrict our function to working
only for arrays where all the elements have the same type. The
solution is the type <code>Array&lt;mixed&gt;</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kd">function</code> <code class="nx">size</code><code class="p">(</code><code class="nx">s</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="nx">mixed</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nx">s</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
<code class="p">}</code>
<code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">size</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code><code class="kc">true</code><code class="p">,</code><code class="s2">"three"</code><code class="p">]));</code></pre>

<p>The element type <code>mixed</code> indicates that the elements of the array can
be of any type. If our function actually indexed the array and
attempted to use any of those elements, Flow would insist that we use
<code>typeof</code> checks or other tests to determine the type of the element
before performing any unsafe operation on it. (If you are willing to give
up on type checking, you can also use <code>any</code> instead of <code>mixed</code>: it
allows you to do whatever you want with the values of the array
without ensuring that the values are of the type you expect.)</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.7 Other Parameterized Types"><div class="sect2" id="idm46198480653576">
<h2>17.8.7 Other Parameterized Types</h2>

<p>We’ve<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="other parameterized types" id="idm46198480274968"/><a data-type="indexterm" data-primary="type checking" data-secondary="other parameterized types" id="idm46198480273720"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="other parameterized types" id="idm46198480272808"/> seen that when you annotate a value as an <code>Array</code>, Flow
requires you to also specify the type of the array elements inside
angle brackets. This additional type is known as a <em>type parameter</em>,
and Array is not the only JavaScript class that is <span class="keep-together">parameterized.</span></p>

<p>JavaScript’s Set class is a collection of elements, like an array is,
and you can’t use <code>Set</code> as a type by itself, but you have to include a
type parameter within angle brackets to specify the type of the values
contained in the set. (Though you can use <code>mixed</code> or <code>any</code> if the set
may contain values of multiple types.) Here’s an example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// Return a set of numbers with members that are exactly twice those</code>
<code class="c1">// of the input set of numbers.</code>
<code class="kd">function</code> <code class="kr">double</code><code class="p">(</code><code class="nx">s</code><code class="o">:</code> <code class="nx">Set</code><code class="o">&lt;</code><code class="nx">number</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nx">Set</code><code class="o">&lt;</code><code class="nx">number</code><code class="o">&gt;</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">doubled</code><code class="o">:</code> <code class="nx">Set</code><code class="o">&lt;</code><code class="nx">number</code><code class="o">&gt;</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Set</code><code class="p">();</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">n</code> <code class="k">of</code> <code class="nx">s</code><code class="p">)</code> <code class="nx">doubled</code><code class="p">.</code><code class="nx">add</code><code class="p">(</code><code class="nx">n</code> <code class="o">*</code> <code class="mi">2</code><code class="p">);</code>
    <code class="k">return</code> <code class="nx">doubled</code><code class="p">;</code>
<code class="p">}</code>
<code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="kr">double</code><code class="p">(</code><code class="k">new</code> <code class="nx">Set</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">])));</code>  <code class="c1">// Prints "Set {2, 4, 6}"</code></pre>

<p>Map is another parameterized type. In this case, there are two type
parameters that must be specified; the type of the keys and the types
of the values:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kr">import</code> <code class="nx">type</code> <code class="p">{</code> <code class="nx">Color</code> <code class="p">}</code> <code class="nx">from</code> <code class="s2">"./Color.js"</code><code class="p">;</code>

<code class="kd">let</code> <code class="nx">colorNames</code><code class="o">:</code> <code class="nx">Map</code><code class="o">&lt;</code><code class="nx">string</code><code class="p">,</code> <code class="nx">Color</code><code class="o">&gt;</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Map</code><code class="p">([</code>
    <code class="p">[</code><code class="s2">"red"</code><code class="p">,</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">]],</code>
    <code class="p">[</code><code class="s2">"green"</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">]],</code>
    <code class="p">[</code><code class="s2">"blue"</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">1</code><code class="p">]]</code>
<code class="p">]);</code></pre>

<p>Flow lets you define type parameters for your own classes as well. The
following code defines a Result class but parameterizes that class with
an Error type and a Value type. We use placeholders <code>E</code> and <code>V</code> in the
code to represent these type parameters. When the user of this class
declares a variable of type Result, they will specify the actual types
to substitute for <code>E</code> and <code>V</code>. The variable declaration might look
like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">result</code><code class="o">:</code> <code class="nx">Result</code><code class="o">&lt;</code><code class="nx">TypeError</code><code class="p">,</code> <code class="nx">Set</code><code class="o">&lt;</code><code class="nx">string</code><code class="o">&gt;&gt;</code><code class="p">;</code></pre>

<p>And here is how the parameterized class is defined:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// This class represents the result of an operation that can either</code>
<code class="c1">// throw an error of type E or a value of type V.</code>
<code class="kr">export</code> <code class="kr">class</code> <code class="nx">Result</code><code class="o">&lt;</code><code class="nx">E</code><code class="p">,</code> <code class="nx">V</code><code class="o">&gt;</code> <code class="p">{</code>
    <code class="nx">error</code><code class="o">:</code> <code class="o">?</code><code class="nx">E</code><code class="p">;</code>
    <code class="nx">value</code><code class="o">:</code> <code class="o">?</code><code class="nx">V</code><code class="p">;</code>

    <code class="nx">constructor</code><code class="p">(</code><code class="nx">error</code><code class="o">:</code> <code class="o">?</code><code class="nx">E</code><code class="p">,</code> <code class="nx">value</code><code class="o">:</code> <code class="o">?</code><code class="nx">V</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">error</code> <code class="o">=</code> <code class="nx">error</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">value</code> <code class="o">=</code> <code class="nx">value</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="nx">threw</code><code class="p">()</code><code class="o">:</code> <code class="o">?</code><code class="nx">E</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code> <code class="p">}</code>
    <code class="nx">returned</code><code class="p">()</code><code class="o">:</code> <code class="o">?</code><code class="nx">V</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">value</code><code class="p">;</code> <code class="p">}</code>

    <code class="nx">get</code><code class="p">()</code><code class="o">:</code><code class="nx">V</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">error</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">throw</code> <code class="k">this</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">value</code> <code class="o">===</code> <code class="kc">null</code> <code class="o">||</code> <code class="k">this</code><code class="p">.</code><code class="nx">value</code> <code class="o">===</code> <code class="kc">undefined</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">throw</code> <code class="k">new</code> <code class="nx">TypeError</code><code class="p">(</code><code class="s2">"Error and value must not both be null"</code><code class="p">);</code>
        <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
            <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">value</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

<code class="p">}</code></pre>

<p>And you can even define type parameters for functions:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// Combine the elements of two arrays into an array of pairs</code>
<code class="kd">function</code> <code class="nx">zip</code><code class="o">&lt;</code><code class="nx">A</code><code class="p">,</code><code class="nx">B</code><code class="o">&gt;</code><code class="p">(</code><code class="nx">a</code><code class="o">:</code><code class="nb">Array</code><code class="o">&lt;</code><code class="nx">A</code><code class="o">&gt;</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code><code class="nb">Array</code><code class="o">&lt;</code><code class="nx">B</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="p">[</code><code class="o">?</code><code class="nx">A</code><code class="p">,</code><code class="o">?</code><code class="nx">B</code><code class="p">]</code><code class="o">&gt;</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">result</code><code class="o">:</code><code class="nb">Array</code><code class="o">&lt;</code><code class="p">[</code><code class="o">?</code><code class="nx">A</code><code class="p">,</code><code class="o">?</code><code class="nx">B</code><code class="p">]</code><code class="o">&gt;</code> <code class="o">=</code> <code class="p">[];</code>
    <code class="kd">let</code> <code class="nx">len</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">max</code><code class="p">(</code><code class="nx">a</code><code class="p">.</code><code class="nx">length</code><code class="p">,</code> <code class="nx">b</code><code class="p">.</code><code class="nx">length</code><code class="p">);</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">len</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">result</code><code class="p">.</code><code class="nx">push</code><code class="p">([</code><code class="nx">a</code><code class="p">[</code><code class="nx">i</code><code class="p">],</code> <code class="nx">b</code><code class="p">[</code><code class="nx">i</code><code class="p">]]);</code>
    <code class="p">}</code>
    <code class="k">return</code> <code class="nx">result</code><code class="p">;</code>
<code class="p">}</code>

<code class="c1">// Create the array [[1,'a'], [2,'b'], [3,'c'], [4,undefined]]</code>
<code class="kd">let</code> <code class="nx">pairs</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="p">[</code><code class="o">?</code><code class="nx">number</code><code class="p">,</code><code class="o">?</code><code class="nx">string</code><code class="p">]</code><code class="o">&gt;</code> <code class="o">=</code> <code class="nx">zip</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">],</code> <code class="p">[</code><code class="s1">'a'</code><code class="p">,</code><code class="s1">'b'</code><code class="p">,</code><code class="s1">'c'</code><code class="p">])</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.8 Read-Only Types"><div class="sect2" id="idm46198480275912">
<h2>17.8.8 Read-Only Types</h2>

<p>Flow<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="read-only types" id="idm46198479902904"/><a data-type="indexterm" data-primary="type checking" data-secondary="read-only types" id="idm46198479779816"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="read-only types" id="idm46198479778872"/> defines some special parameterized “utility types” that have
names beginning with <code>$</code>. Most of these types have advanced use cases
that we are not going to cover here. But two of them are quite useful
in practice. If you have an object type T and want to make a read-only
version of that type, just write <code>$ReadOnly&lt;T&gt;</code>. Similarly, you can
write <code>$ReadOnlyArray&lt;T&gt;</code> to describe a read-only array with elements
of type T.</p>

<p>The reason to use these types is not because they can offer any
guarantee that an object or array can’t be modified (see
<code>Object.freeze()</code> in <a data-type="xref" href="ch14.xhtml#extensibleattr">§14.2</a> if you want true read-only
objects) but because it allows you to catch bugs caused by
unintentional modifications. If you write a function that takes an
object or array argument and does not change any of the object’s
properties or the array’s elements, then you can annotate the
function parameter with one of Flow’s read-only types. If you do this,
then Flow will report an error if you forget and accidentally modify
the input value. Here are two examples:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="nx">type</code> <code class="nx">Point</code> <code class="o">=</code> <code class="p">{</code><code class="nx">x</code><code class="o">:</code><code class="nx">number</code><code class="p">,</code> <code class="nx">y</code><code class="o">:</code><code class="nx">number</code><code class="p">};</code>

<code class="c1">// This function takes a Point object but promises not to modify it</code>
<code class="kd">function</code> <code class="nx">distance</code><code class="p">(</code><code class="nx">p</code><code class="o">:</code> <code class="nx">$ReadOnly</code><code class="o">&lt;</code><code class="nx">Point</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">hypot</code><code class="p">(</code><code class="nx">p</code><code class="p">.</code><code class="nx">x</code><code class="p">,</code> <code class="nx">p</code><code class="p">.</code><code class="nx">y</code><code class="p">);</code>
<code class="p">}</code>

<code class="kd">let</code> <code class="nx">p</code><code class="o">:</code> <code class="nx">Point</code> <code class="o">=</code> <code class="p">{</code><code class="nx">x</code><code class="o">:</code><code class="mi">3</code><code class="p">,</code> <code class="nx">y</code><code class="o">:</code><code class="mi">4</code><code class="p">};</code>
<code class="nx">distance</code><code class="p">(</code><code class="nx">p</code><code class="p">)</code>  <code class="c1">// =&gt; 5</code>

<code class="c1">// This function takes an array of numbers that it will not modify</code>
<code class="kd">function</code> <code class="nx">average</code><code class="p">(</code><code class="nx">data</code><code class="o">:</code> <code class="nx">$ReadOnlyArray</code><code class="o">&lt;</code><code class="nx">number</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">sum</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">data</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="nx">sum</code> <code class="o">+=</code> <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="p">];</code>
    <code class="k">return</code> <code class="nx">sum</code><code class="o">/</code><code class="nx">data</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
<code class="p">}</code>

<code class="kd">let</code> <code class="nx">data</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="nx">number</code><code class="o">&gt;</code> <code class="o">=</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="p">];</code>
<code class="nx">average</code><code class="p">(</code><code class="nx">data</code><code class="p">)</code> <code class="c1">// =&gt; 3</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.9 Function Types"><div class="sect2" id="idm46198479771384">
<h2>17.8.9 Function Types</h2>

<p>We<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="function types" id="idm46198479770136"/><a data-type="indexterm" data-primary="type checking" data-secondary="function types" id="idm46198479526248"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="function types" id="idm46198479525304"/> have seen how to add type annotations to specify the types of a
function’s parameters and its return type. But when one of the
parameters of a function is itself a function, we need to be able to
specify the type of that function parameter.</p>

<p>To express the type of a function with Flow, write the types of each
parameter, separate them with commas, enclose them in parentheses,
and then follow that with an arrow and type return type of the
function.</p>

<p>Here is an example function that expects to be passed a callback
function. Notice how we defined a type alias for the type of the
callback function:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// The type of the callback function used in fetchText() below</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">FetchTextCallback</code> <code class="o">=</code> <code class="p">(</code><code class="o">?</code><code class="nb">Error</code><code class="p">,</code> <code class="o">?</code><code class="nx">number</code><code class="p">,</code> <code class="o">?</code><code class="nx">string</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="k">void</code><code class="p">;</code>

<code class="kr">export</code> <code class="k">default</code> <code class="kd">function</code> <code class="nx">fetchText</code><code class="p">(</code><code class="nx">url</code><code class="o">:</code> <code class="nx">string</code><code class="p">,</code> <code class="nx">callback</code><code class="o">:</code> <code class="nx">FetchTextCallback</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">status</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>
    <code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">)</code>
        <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="nx">status</code> <code class="o">=</code> <code class="nx">response</code><code class="p">.</code><code class="nx">status</code><code class="p">;</code>
            <code class="k">return</code> <code class="nx">response</code><code class="p">.</code><code class="nx">text</code><code class="p">()</code>
        <code class="p">})</code>
        <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">body</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="nx">callback</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="nx">status</code><code class="p">,</code> <code class="nx">body</code><code class="p">);</code>
        <code class="p">})</code>
        <code class="p">.</code><code class="k">catch</code><code class="p">(</code><code class="nx">error</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="nx">callback</code><code class="p">(</code><code class="nx">error</code><code class="p">,</code> <code class="nx">status</code><code class="p">,</code> <code class="kc">null</code><code class="p">);</code>
        <code class="p">});</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.10 Union Types"><div class="sect2" id="idm46198479520680">
<h2>17.8.10 Union Types</h2>

<p>Let’s<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="union types" id="idm46198479368200"/><a data-type="indexterm" data-primary="type checking" data-secondary="union types" id="idm46198479366920"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="union types" id="idm46198479365976"/> return one more time to the <code>size()</code> function. It doesn’t really
make sense to have a function that does nothing other than return the
length of an array. Arrays have a perfectly good <code>length</code> property for
that. But <code>size()</code> might be useful if it could take any kind of
collection object (an array or a Set or a Map) and return the number
of elements in the collection. In regular untyped JavaScript it would
be easy to write a <code>size()</code> function like that. With Flow, we need a
way to express a type that allows arrays, Sets, and Maps, but doesn’t
allow values of any other type.</p>

<p>Flow calls types like this <em>Union types</em> and allows you to express
them by simply listing the desired types and separating them with
vertical bar characters:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="kd">function</code> <code class="nx">size</code><code class="p">(</code><code class="nx">collection</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="nx">mixed</code><code class="o">&gt;|</code><code class="nx">Set</code><code class="o">&lt;</code><code class="nx">mixed</code><code class="o">&gt;|</code><code class="nx">Map</code><code class="o">&lt;</code><code class="nx">mixed</code><code class="p">,</code><code class="nx">mixed</code><code class="o">&gt;</code><code class="p">)</code><code class="o">:</code> <code class="nx">number</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nb">Array</code><code class="p">.</code><code class="nx">isArray</code><code class="p">(</code><code class="nx">collection</code><code class="p">))</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">collection</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">collection</code><code class="p">.</code><code class="nx">size</code><code class="p">;</code>
    <code class="p">}</code>
<code class="p">}</code>
<code class="nx">size</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code><code class="kc">true</code><code class="p">,</code><code class="s2">"three"</code><code class="p">])</code> <code class="o">+</code> <code class="nx">size</code><code class="p">(</code><code class="k">new</code> <code class="nx">Set</code><code class="p">([</code><code class="kc">true</code><code class="p">,</code><code class="kc">false</code><code class="p">]))</code> <code class="c1">// =&gt; 5</code></pre>

<p>Union types can be read using the word “or”—“an array or a Set or a
Map”—so the fact that this Flow syntax uses the same vertical bar
character as JavaScript’s OR operators is intentional.</p>

<p>We saw earlier that putting a question mark before a type allows
<code>null</code> and <code>undefined</code> values. And now you can see that a <code>?</code> prefix
is simply a shortcut for adding a <code>|null|void</code> suffix to a type.</p>

<p>In general, when you annotate a value with a Union type, Flow will not
allow you to use that value until you’ve done enough tests to figure
out what the type of the actual value is. In the <code>size()</code> example
we just looked at, we need
to explicitly check whether the argument is an array before we try to
access the <code>length</code> property of the argument. Note that we do not have
to distinguish a Set argument from a Map argument, 
<span class="keep-together">however:</span> both of
those classes define a <code>size</code> property, so the code in the <code>else</code>
clause is safe as long as the argument is not an array.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="17.8.11 Enumerated Types and Discriminated Unions"><div class="sect2" id="idm46198479254232">
<h2>17.8.11 Enumerated Types and Discriminated Unions</h2>

<p>Flow<a data-type="indexterm" data-primary="tools and extensions" data-secondary="type checking with Flow" data-tertiary="enumerated types and discriminated unions" id="idm46198479252536"/><a data-type="indexterm" data-primary="type checking" data-secondary="enumerated types and discriminated unions" id="idm46198479251160"/><a data-type="indexterm" data-primary="Flow language extension" data-secondary="enumerated types and discriminated unions" id="idm46198479250184"/> allows you to use primitive literals as types that consist of that
one single value. If you write <code>let x:3;</code>, then Flow will not allow
you to assign any value to that variable other than 3. It is not often
useful to define types that have only a single member, but a union of
literal types can be useful. You can probably imagine a use for types
like these, for example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">type</code> <code class="nx">Answer</code> <code class="o">=</code> <code class="s2">"yes"</code> <code class="o">|</code> <code class="s2">"no"</code><code class="p">;</code>
<code class="nx">type</code> <code class="nx">Digit</code> <code class="o">=</code> <code class="mi">0</code><code class="o">|</code><code class="mi">1</code><code class="o">|</code><code class="mi">2</code><code class="o">|</code><code class="mi">3</code><code class="o">|</code><code class="mi">4</code><code class="o">|</code><code class="mi">5</code><code class="o">|</code><code class="mi">6</code><code class="o">|</code><code class="mi">7</code><code class="o">|</code><code class="mi">8</code><code class="o">|</code><code class="mi">9</code><code class="p">;</code></pre>

<p>If you use types made up of literals, you need to understand that only
literal values are allowed:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">a</code><code class="o">:</code> <code class="nx">Answer</code> <code class="o">=</code> <code class="s2">"Yes"</code><code class="p">.</code><code class="nx">toLowerCase</code><code class="p">();</code> <code class="c1">// Error: can't assign string to Answer</code>
<code class="kd">let</code> <code class="nx">d</code><code class="o">:</code> <code class="nx">Digit</code> <code class="o">=</code> <code class="mi">3</code><code class="o">+</code><code class="mi">4</code><code class="p">;</code>                  <code class="c1">// Error: can't assign number to Digit</code></pre>

<p>When Flow checks your types, it does not actually do the calculations:
it just checks the types of the calculations. Flow knows that
<code>toLowerCase()</code> returns a string and that the <code>+</code> operator on numbers
returns a number. Even though we know that both of these calculations
return values that are within the type, Flow cannot know that and
flags errors on both of these lines.</p>

<p>A union type of literal types like <code>Answer</code> and <code>Digit</code> is an
example of an <em>enumerated type</em>, or <em>enum</em>. A canonical use case for
enum types is to represent the suits of playing cards:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">type</code> <code class="nx">Suit</code> <code class="o">=</code> <code class="s2">"Clubs"</code> <code class="o">|</code> <code class="s2">"Diamonds"</code> <code class="o">|</code> <code class="s2">"Hearts"</code> <code class="o">|</code> <code class="s2">"Spades"</code><code class="p">;</code></pre>

<p>A more relevant example might be HTTP status codes:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">type</code> <code class="nx">HTTPStatus</code> <code class="o">=</code>
    <code class="o">|</code> <code class="mi">200</code>    <code class="c1">// OK</code>
    <code class="o">|</code> <code class="mi">304</code>    <code class="c1">// Not Modified</code>
    <code class="o">|</code> <code class="mi">403</code>    <code class="c1">// Forbidden</code>
    <code class="o">|</code> <code class="mi">404</code><code class="p">;</code>   <code class="c1">// Not Found</code></pre>

<p>One of the pieces of advice that new programmers often hear is to
avoid using literals in their code and to instead define symbolic
constants to represent those values. One practical reason for this is
to avoid the problem of typos: if you misspell a string literal like
“Diamonds” JavaScript may never complain but your code may not work
right. If you mistype an identifier, on the other hand, JavaScript is
likely to throw an error that you’ll notice. With Flow, this advice
does not always apply. If you annotate a variable with the type Suit,
and then try to assign a misspelled suit to it, Flow will alert you to
the error.</p>

<p>Another important use for literal types is the creation of
<em>discriminated unions</em>. When you work with union types (made up of
actually different types, not of literals), you typically have to write
code to discriminate among the possible types. In the previous section, we wrote a function that could take an array or a Set or a Map as
its argument and had to write code to discriminate array input from
Set or Map input. If you want to create a union of Object types, you
can make these types easy to discriminate by using a literal type
within each of the individual Object types.</p>

<p>An<a data-type="indexterm" data-primary="message events" id="idm46198479096968"/> example will make this clear. Suppose you’re using a worker thread
in Node (<a data-type="xref" href="ch16.xhtml#node-worker-threads">§16.11</a>) and are using <code>postMessage()</code> and
“message” events for sending object-based messages between the main
thread and the worker thread. There are multiple types of messages
that the worker might want to send to the main thread, but we’d like
to write a Flow Union type that describes all possible
messages.<a data-type="indexterm" data-primary="" data-startref="tools17" id="idm46198479094776"/><a data-type="indexterm" data-primary="" data-startref="Flow17" id="idm46198479093800"/><a data-type="indexterm" data-primary="" data-startref="typecheck17" id="idm46198479069848"/><a data-type="indexterm" data-primary="" data-startref="TEflow17" id="idm46198479068904"/> Consider this code:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// @flow</code>
<code class="c1">// The worker sends a message of this type when it is done</code>
<code class="c1">// reticulating the splines we sent it.</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">ResultMessage</code> <code class="o">=</code> <code class="p">{</code>
    <code class="nx">messageType</code><code class="o">:</code> <code class="s2">"result"</code><code class="p">,</code>
    <code class="nx">result</code><code class="o">:</code> <code class="nb">Array</code><code class="o">&lt;</code><code class="nx">ReticulatedSpline</code><code class="o">&gt;</code><code class="p">,</code> <code class="c1">// Assume this type is defined elsewhere.</code>
<code class="p">};</code>

<code class="c1">// The worker sends a message of this type if its code failed with an exception.</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">ErrorMessage</code> <code class="o">=</code> <code class="p">{</code>
    <code class="nx">messageType</code><code class="o">:</code> <code class="s2">"error"</code><code class="p">,</code>
    <code class="nx">error</code><code class="o">:</code> <code class="nb">Error</code><code class="p">,</code>
<code class="p">};</code>

<code class="c1">// The worker sends a message of this type to report usage statistics.</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">StatisticsMessage</code> <code class="o">=</code> <code class="p">{</code>
    <code class="nx">messageType</code><code class="o">:</code> <code class="s2">"stats"</code><code class="p">,</code>
    <code class="nx">splinesReticulated</code><code class="o">:</code> <code class="nx">number</code><code class="p">,</code>
    <code class="nx">splinesPerSecond</code><code class="o">:</code> <code class="nx">number</code>
<code class="p">};</code>

<code class="c1">// When we receive a message from the worker it will be a WorkerMessage.</code>
<code class="kr">export</code> <code class="nx">type</code> <code class="nx">WorkerMessage</code> <code class="o">=</code> <code class="nx">ResultMessage</code> <code class="o">|</code> <code class="nx">ErrorMessage</code> <code class="o">|</code> <code class="nx">StatisticsMessage</code><code class="p">;</code>

<code class="c1">// The main thread will have an event handler function that is passed</code>
<code class="c1">// a WorkerMessage. But because we've carefully defined each of the</code>
<code class="c1">// message types to have a messageType property with a literal type,</code>
<code class="c1">// the event handler can easily discriminate among the possible messages:</code>
<code class="kd">function</code> <code class="nx">handleMessageFromReticulator</code><code class="p">(</code><code class="nx">message</code><code class="o">:</code> <code class="nx">WorkerMessage</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">message</code><code class="p">.</code><code class="nx">messageType</code> <code class="o">===</code> <code class="s2">"result"</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Only ResultMessage has a messageType property with this value</code>
        <code class="c1">// so Flow knows that it is safe to use message.result here.</code>
        <code class="c1">// And Flow will complain if you try to use any other property.</code>
        <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">message</code><code class="p">.</code><code class="nx">result</code><code class="p">);</code>
    <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">message</code><code class="p">.</code><code class="nx">messageType</code> <code class="o">===</code> <code class="s2">"error"</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Only ErrorMessage has a messageType property with value "error"</code>
        <code class="c1">// so knows that it is safe to use message.error here.</code>
        <code class="k">throw</code> <code class="nx">message</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>
    <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">message</code><code class="p">.</code><code class="nx">messageType</code> <code class="o">===</code> <code class="s2">"stats"</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Only StatisticsMessage has a messageType property with value "stats"</code>
        <code class="c1">// so knows that it is safe to use message.splinesPerSecond here.</code>
        <code class="nx">console</code><code class="p">.</code><code class="nx">info</code><code class="p">(</code><code class="nx">message</code><code class="p">.</code><code class="nx">splinesPerSecond</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">}</code></pre>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="17.9 Summary"><div class="sect1" id="idm46198481377096">
<h1>17.9 Summary</h1>

<p>JavaScript<a data-type="indexterm" data-primary="JavaScript" data-secondary="benefits of" id="idm46198479064152"/> is the most-used programming language in the world
today. It is a living language—one that continues to evolve and
improve—surrounded by a flourishing ecosystem of libraries, tools, and
extensions. This chapter introduced some of those tools and
extensions, but there are many more to learn about. The JavaScript
ecosystem flourishes because the JavaScript developer community is
active and vibrant, full of peers who share their knowledge through
blog posts, videos, and conference presentations. As you close this
book and go forth to join this community, you will find no shortage of
information sources to keep you engaged with and learning about
JavaScript.</p>

<p class="byline">Best wishes,
David Flanagan,
March 2020</p>
</div></section>







<div data-type="footnotes"><p data-type="footnote" id="idm46198481315640"><sup><a href="ch17.xhtml#idm46198481315640-marker">1</a></sup> If you have programmed with Java, you may have experienced something like this the first time you wrote a generic API that used a type parameter. I found the learning process for Flow to be remarkably similar to what I went through in 2004 when generics were added to Java.</p></div></div></section></div>



  </body>
</html>