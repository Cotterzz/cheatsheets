<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    @charset "utf-8";#sbo-rt-content html,#sbo-rt-content div,#sbo-rt-content div,#sbo-rt-content span,#sbo-rt-content applet,#sbo-rt-content object,#sbo-rt-content iframe,#sbo-rt-content h1,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5,#sbo-rt-content h6,#sbo-rt-content p,#sbo-rt-content blockquote,#sbo-rt-content pre,#sbo-rt-content a,#sbo-rt-content abbr,#sbo-rt-content acronym,#sbo-rt-content address,#sbo-rt-content big,#sbo-rt-content cite,#sbo-rt-content code,#sbo-rt-content del,#sbo-rt-content dfn,#sbo-rt-content em,#sbo-rt-content img,#sbo-rt-content ins,#sbo-rt-content kbd,#sbo-rt-content q,#sbo-rt-content s,#sbo-rt-content samp,#sbo-rt-content small,#sbo-rt-content strike,#sbo-rt-content strong,#sbo-rt-content sub,#sbo-rt-content sup,#sbo-rt-content tt,#sbo-rt-content var,#sbo-rt-content b,#sbo-rt-content u,#sbo-rt-content i,#sbo-rt-content center,#sbo-rt-content dl,#sbo-rt-content dt,#sbo-rt-content dd,#sbo-rt-content ol,#sbo-rt-content ul,#sbo-rt-content li,#sbo-rt-content fieldset,#sbo-rt-content form,#sbo-rt-content label,#sbo-rt-content legend,#sbo-rt-content table,#sbo-rt-content caption,#sbo-rt-content tdiv,#sbo-rt-content tfoot,#sbo-rt-content thead,#sbo-rt-content tr,#sbo-rt-content th,#sbo-rt-content td,#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content canvas,#sbo-rt-content details,#sbo-rt-content embed,#sbo-rt-content figure,#sbo-rt-content figcaption,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content output,#sbo-rt-content ruby,#sbo-rt-content section,#sbo-rt-content summary,#sbo-rt-content time,#sbo-rt-content mark,#sbo-rt-content audio,#sbo-rt-content video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content details,#sbo-rt-content figcaption,#sbo-rt-content figure,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content section{display:block}#sbo-rt-content div{line-height:1}#sbo-rt-content ol,#sbo-rt-content ul{list-style:none}#sbo-rt-content blockquote,#sbo-rt-content q{quotes:none}#sbo-rt-content blockquote:before,#sbo-rt-content blockquote:after,#sbo-rt-content q:before,#sbo-rt-content q:after{content:none}#sbo-rt-content table{border-collapse:collapse;border-spacing:0}@page{margin:5px !important}#sbo-rt-content p{margin:10px 0 0;line-height:125%;text-align:left}#sbo-rt-content p.byline{text-align:left;margin:-33px auto 35px;font-style:italic;font-weight:bold}#sbo-rt-content div.preface p+p.byline{margin:1em 0 0 !important}#sbo-rt-content div.preface p.byline+p.byline{margin:0 !important}#sbo-rt-content div.sect1&gt;p.byline{margin:-.25em 0 1em}#sbo-rt-content div.sect1&gt;p.byline+p.byline{margin-top:-1em}#sbo-rt-content em{font-style:italic;font-family:inherit}#sbo-rt-content em strong,#sbo-rt-content strong em{font-weight:bold;font-style:italic;font-family:inherit}#sbo-rt-content strong,#sbo-rt-content span.bold{font-weight:bold}#sbo-rt-content em.replaceable{font-style:italic}#sbo-rt-content strong.userinput{font-weight:bold;font-style:normal}#sbo-rt-content span.bolditalic{font-weight:bold;font-style:italic}#sbo-rt-content a.ulink,#sbo-rt-content a.xref,#sbo-rt-content a.email,#sbo-rt-content a.link,#sbo-rt-content a{text-decoration:none;color:#8e0012}#sbo-rt-content span.lineannotation{font-style:italic;color:#a62a2a;font-family:serif}#sbo-rt-content span.underline{text-decoration:underline}#sbo-rt-content span.strikethrough{text-decoration:line-through}#sbo-rt-content span.smallcaps{font-variant:small-caps}#sbo-rt-content span.cursor{background:#000;color:#fff}#sbo-rt-content span.smaller{font-size:75%}#sbo-rt-content .boxedtext,#sbo-rt-content .keycap{border-style:solid;border-width:1px;border-color:#000;padding:1px}#sbo-rt-content span.gray50{color:#7F7F7F;}#sbo-rt-content h1,#sbo-rt-content div.toc-title,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5{-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;font-weight:bold;text-align:left;page-break-after:avoid !important;font-family:sans-serif,"DejaVuSans"}#sbo-rt-content div.toc-title{font-size:1.5em;margin-top:20px !important;margin-bottom:30px !important}#sbo-rt-content section[data-type="sect1"] h1{font-size:1.3em;color:#8e0012;margin:40px 0 8px 0}#sbo-rt-content section[data-type="sect2"] h2{font-size:1.1em;margin:30px 0 8px 0 !important}#sbo-rt-content section[data-type="sect3"] h3{font-size:1em;color:#555;margin:20px 0 8px 0 !important}#sbo-rt-content section[data-type="sect4"] h4{font-size:1em;font-weight:normal;font-style:italic;margin:15px 0 6px 0 !important}#sbo-rt-content section[data-type="chapter"]&gt;div&gt;h1,#sbo-rt-content section[data-type="preface"]&gt;div&gt;h1,#sbo-rt-content section[data-type="appendix"]&gt;div&gt;h1,#sbo-rt-content section[data-type="glossary"]&gt;div&gt;h1,#sbo-rt-content section[data-type="bibliography"]&gt;div&gt;h1,#sbo-rt-content section[data-type="index"]&gt;div&gt;h1{font-size:2em;line-height:1;margin-bottom:50px;color:#000;padding-bottom:10px;border-bottom:1px solid #000}#sbo-rt-content span.label,#sbo-rt-content span.keep-together{font-size:inherit;font-weight:inherit}#sbo-rt-content div[data-type="part"] h1{font-size:2em;text-align:center;margin-top:0 !important;margin-bottom:50px;padding:50px 0 10px 0;border-bottom:1px solid #000}#sbo-rt-content img.width-ninety{width:90%}#sbo-rt-content img{max-width:95%;margin:0 auto;padding:0}#sbo-rt-content div.figure{background-color:transparent;text-align:center !important;margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content figure{margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content div.figure h6,#sbo-rt-content figure h6,#sbo-rt-content figure figcaption{font-size:.9rem !important;text-align:center;font-weight:normal !important;font-style:italic;font-family:serif !important;text-transform:none !important;letter-spacing:normal !important;color:#000;padding-top:.25em !important;margin-top:0 !important;page-break-before:avoid}#sbo-rt-content div.informalfigure{text-align:center !important;padding:5px 0 !important}#sbo-rt-content div.sidebar{margin:15px 0 10px 0 !important;border:1px solid #DCDCDC;background-color:#F7F7F7;padding:15px !important;page-break-inside:avoid}#sbo-rt-content aside[data-type="sidebar"]{margin:15px 0 10px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar-title,#sbo-rt-content aside[data-type="sidebar"] h5{font-weight:bold;font-size:1em;font-family:sans-serif;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar ol,#sbo-rt-content div.sidebar ul,#sbo-rt-content aside[data-type="sidebar"] ol,#sbo-rt-content aside[data-type="sidebar"] ul{margin-left:1.25em !important}#sbo-rt-content div.sidebar div.figure p.title,#sbo-rt-content aside[data-type="sidebar"] figcaption,#sbo-rt-content div.sidebar div.informalfigure div.caption{font-size:90%;text-align:center;font-weight:normal;font-style:italic;font-family:serif !important;color:#000;padding:5px !important;page-break-before:avoid;page-break-after:avoid}#sbo-rt-content div.sidebar div.tip,#sbo-rt-content div.sidebar div[data-type="tip"],#sbo-rt-content div.sidebar div.note,#sbo-rt-content div.sidebar div[data-type="note"],#sbo-rt-content div.sidebar div.warning,#sbo-rt-content div.sidebar div[data-type="warning"],#sbo-rt-content div.sidebar div[data-type="caution"],#sbo-rt-content div.sidebar div[data-type="important"]{margin:20px auto 20px auto !important;font-size:90%;width:85%}#sbo-rt-content aside[data-type="sidebar"] p.byline{font-size:90%;font-weight:bold;font-style:italic;text-align:center;text-indent:0;margin:5px auto 6px;page-break-after:avoid}#sbo-rt-content pre{white-space:pre-wrap;font-family:"Ubuntu Mono",monospace;margin:25px 0 25px 20px;font-size:85%;display:block;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content div.note pre.programlisting,#sbo-rt-content div.tip pre.programlisting,#sbo-rt-content div.warning pre.programlisting,#sbo-rt-content div.caution pre.programlisting,#sbo-rt-content div.important pre.programlisting{margin-bottom:0}#sbo-rt-content code{font-family:"Ubuntu Mono",monospace;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content code strong em,#sbo-rt-content code em strong,#sbo-rt-content pre em strong,#sbo-rt-content pre strong em,#sbo-rt-content strong code em code,#sbo-rt-content em code strong code,#sbo-rt-content span.bolditalic code{font-weight:bold;font-style:italic;font-family:"Ubuntu Mono BoldItal",monospace}#sbo-rt-content code em,#sbo-rt-content em code,#sbo-rt-content pre em,#sbo-rt-content em.replaceable{font-family:"Ubuntu Mono Ital",monospace;font-style:italic}#sbo-rt-content code strong,#sbo-rt-content strong code,#sbo-rt-content pre strong,#sbo-rt-content strong.userinput{font-family:"Ubuntu Mono Bold",monospace;font-weight:bold}#sbo-rt-content div[data-type="example"]{margin:10px 0 15px 0 !important}#sbo-rt-content div[data-type="example"] h1,#sbo-rt-content div[data-type="example"] h2,#sbo-rt-content div[data-type="example"] h3,#sbo-rt-content div[data-type="example"] h4,#sbo-rt-content div[data-type="example"] h5,#sbo-rt-content div[data-type="example"] h6{font-style:italic;font-weight:normal;text-align:left !important;text-transform:none !important;font-family:serif !important;margin:10px 0 5px 0 !important;border-bottom:1px solid #000}#sbo-rt-content li pre.example{padding:10px 0 !important}#sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],#sbo-rt-content div[data-type="example"] pre[data-type="screen"]{margin:0}#sbo-rt-content section[data-type="titlepage"]&gt;div&gt;h1{font-size:2em;margin:50px 0 10px 0 !important;line-height:1;text-align:center}#sbo-rt-content section[data-type="titlepage"] h2,#sbo-rt-content section[data-type="titlepage"] p.subtitle,#sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"]{font-size:1.3em;font-weight:normal;text-align:center;margin-top:.5em;color:#555}#sbo-rt-content section[data-type="titlepage"]&gt;div&gt;h2[data-type="author"],#sbo-rt-content section[data-type="titlepage"] p.author{font-size:1.3em;font-family:serif !important;font-weight:bold;margin:50px 0 !important;text-align:center}#sbo-rt-content section[data-type="titlepage"] p.edition{text-align:center;text-transform:uppercase;margin-top:2em}#sbo-rt-content section[data-type="titlepage"]{text-align:center}#sbo-rt-content section[data-type="titlepage"]:after{content:url(css_assets/titlepage_footer_ebook.png);margin:0 auto;max-width:80%}#sbo-rt-content div.book div.titlepage div.publishername{margin-top:60%;margin-bottom:20px;text-align:center;font-size:1.25em}#sbo-rt-content div.book div.titlepage div.locations p{margin:0;text-align:center}#sbo-rt-content div.book div.titlepage div.locations p.cities{font-size:80%;text-align:center;margin-top:5px}#sbo-rt-content section.preface[title="Dedication"]&gt;div.titlepage h2.title{text-align:center;text-transform:uppercase;font-size:1.5em;margin-top:50px;margin-bottom:50px}#sbo-rt-content ul.stafflist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.stafflist li{list-style-type:none;padding:5px 0}#sbo-rt-content ul.printings li{list-style-type:none}#sbo-rt-content section.preface[title="Dedication"] p{font-style:italic;text-align:center}#sbo-rt-content div.colophon h1.title{font-size:1.3em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon h2.subtitle{margin:0 !important;color:#000;font-family:serif !important;font-size:1em;font-weight:normal}#sbo-rt-content div.colophon div.author h3.author{font-size:1.1em;font-family:serif !important;margin:10px 0 0 !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h4,#sbo-rt-content div.colophon div.editor h3.editor{color:#000;font-size:.8em;margin:15px 0 0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h3.editor{font-size:.8em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.publisher{margin-top:10px}#sbo-rt-content div.colophon div.publisher p,#sbo-rt-content div.colophon div.publisher span.publishername{margin:0;font-size:.8em}#sbo-rt-content div.legalnotice p,#sbo-rt-content div.timestamp p{font-size:.8em}#sbo-rt-content div.timestamp p{margin-top:10px}#sbo-rt-content div.colophon[title="About the Author"] h1.title,#sbo-rt-content div.colophon[title="Colophon"] h1.title{font-size:1.5em;margin:0 !important;font-family:sans-serif !important}#sbo-rt-content section.chapter div.titlepage div.author{margin:10px 0 10px 0}#sbo-rt-content section.chapter div.titlepage div.author div.affiliation{font-style:italic}#sbo-rt-content div.attribution{margin:5px 0 0 50px !important}#sbo-rt-content h3.author span.orgname{display:none}#sbo-rt-content div.epigraph{margin:10px 0 10px 20px !important;page-break-inside:avoid;font-size:90%}#sbo-rt-content div.epigraph p{font-style:italic}#sbo-rt-content blockquote,#sbo-rt-content div.blockquote{margin:10px !important;page-break-inside:avoid;font-size:95%}#sbo-rt-content blockquote p,#sbo-rt-content div.blockquote p{font-style:italic;margin:.75em 0 0 !important}#sbo-rt-content blockquote div.attribution,#sbo-rt-content blockquote p[data-type="attribution"]{margin:5px 0 10px 30px !important;text-align:right;width:80%}#sbo-rt-content blockquote div.attribution p,#sbo-rt-content blockquote p[data-type="attribution"]{font-style:normal;margin-top:5px}#sbo-rt-content blockquote div.attribution p:before,#sbo-rt-content blockquote p[data-type="attribution"]:before{font-style:normal;content:"—";-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none}#sbo-rt-content p.right{text-align:right;margin:0}#sbo-rt-content div[data-type="footnotes"]{border-top:1px solid black;margin-top:2em}#sbo-rt-content sub,#sbo-rt-content sup{font-size:75%;line-height:0;position:relative}#sbo-rt-content sup{top:-.5em}#sbo-rt-content sub{bottom:-.25em}#sbo-rt-content p[data-type="footnote"]{font-size:90% !important;line-height:1.2em !important;margin-left:2.5em !important;text-indent:-2.3em !important}#sbo-rt-content p[data-type="footnote"] sup{display:inline-block !important;position:static !important;width:2em !important;text-align:right !important;font-size:100% !important;padding-right:.5em !important}#sbo-rt-content p[data-type="footnote"] a[href$="-marker"]{font-family:sans-serif !important;font-size:90% !important;color:#8e0012 !important}#sbo-rt-content p[data-type="footnote"] a[data-type="xref"]{margin:0 !important;padding:0 !important;text-indent:0 !important}#sbo-rt-content a[data-type="noteref"]{font-family:sans-serif !important;color:#8e0012;margin-left:0;padding-left:0}#sbo-rt-content div.refentry p.refname{font-size:1em;font-family:sans-serif,"DejaVuSans";font-weight:bold;margin-bottom:5px;overflow:auto;width:100%}#sbo-rt-content div.refentry{width:100%;display:block;margin-top:2em}#sbo-rt-content div.refsynopsisdiv{display:block;clear:both}#sbo-rt-content div.refentry header{page-break-inside:avoid !important;display:block;break-inside:avoid !important;padding-top:0;border-bottom:1px solid #000}#sbo-rt-content div.refsect1 h6{font-size:.9em;font-family:sans-serif,"DejaVuSans";font-weight:bold}#sbo-rt-content div.refsect1{margin-top:3em}#sbo-rt-content dl{margin-bottom:1.5em !important}#sbo-rt-content dt{padding-top:10px !important;padding-bottom:0 !important;line-height:1.25rem;font-style:italic}#sbo-rt-content dd{margin:10px 0 .25em 1.5em !important;line-height:1.65em !important}#sbo-rt-content dd p{padding:0 !important;margin:0 0 10px !important}#sbo-rt-content dd ol,#sbo-rt-content dd ul{padding-left:1em}#sbo-rt-content dd li{margin-top:0;margin-bottom:0}#sbo-rt-content dd,#sbo-rt-content li{text-align:left}#sbo-rt-content ul,#sbo-rt-content ul&gt;li,#sbo-rt-content ol ul,#sbo-rt-content ol ul&gt;li,#sbo-rt-content ul ol ul,#sbo-rt-content ul ol ul&gt;li{list-style-type:disc}#sbo-rt-content ul ul,#sbo-rt-content ul ul&gt;li{list-style-type:square}#sbo-rt-content ul ul ul,#sbo-rt-content ul ul ul&gt;li{list-style-type:circle}#sbo-rt-content ol,#sbo-rt-content ol&gt;li,#sbo-rt-content ol ul ol,#sbo-rt-content ol ul ol&gt;li,#sbo-rt-content ul ol,#sbo-rt-content ul ol&gt;li{list-style-type:decimal}#sbo-rt-content ol ol,#sbo-rt-content ol ol&gt;li{list-style-type:lower-alpha}#sbo-rt-content ol ol ol,#sbo-rt-content ol ol ol&gt;li{list-style-type:lower-roman}#sbo-rt-content ol,#sbo-rt-content ul{list-style-position:outside;margin:15px 0 15px 1.25em;padding-left:2.25em}#sbo-rt-content ol li,#sbo-rt-content ul li{margin:.5em 0 .65em;line-height:125%}#sbo-rt-content div.orderedlistalpha{list-style-type:upper-alpha}#sbo-rt-content table.simplelist,#sbo-rt-content ul.simplelist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.simplelist li{list-style-type:none;padding:5px 0}#sbo-rt-content table.simplelist td{border:none}#sbo-rt-content table.simplelist tr{border-bottom:none}#sbo-rt-content table.simplelist tr:nth-of-type(even){background-color:transparent}#sbo-rt-content dl.calloutlist p:first-child{margin-top:-25px !important}#sbo-rt-content dl.calloutlist dd{padding-left:0;margin-top:-25px}#sbo-rt-content dl.calloutlist img,#sbo-rt-content a.co img{padding:0}#sbo-rt-content div.toc ol{margin-top:8px !important;margin-bottom:8px !important;margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.toc ol ol{margin-left:30px !important;padding-left:0 !important}#sbo-rt-content div.toc ol li{list-style-type:none}#sbo-rt-content div.toc a{color:#8e0012}#sbo-rt-content div.toc ol a{font-size:1em;font-weight:bold}#sbo-rt-content div.toc ol&gt;li&gt;ol a{font-weight:bold;font-size:1em}#sbo-rt-content div.toc ol&gt;li&gt;ol&gt;li&gt;ol a{text-decoration:none;font-weight:normal;font-size:1em}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"],#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{margin:30px !important;font-size:90%;padding:10px 8px 20px 8px !important;page-break-inside:avoid}#sbo-rt-content div.tip ol,#sbo-rt-content div.tip ul,#sbo-rt-content div[data-type="tip"] ol,#sbo-rt-content div[data-type="tip"] ul,#sbo-rt-content div.note ol,#sbo-rt-content div.note ul,#sbo-rt-content div[data-type="note"] ol,#sbo-rt-content div[data-type="note"] ul,#sbo-rt-content div.warning ol,#sbo-rt-content div.warning ul,#sbo-rt-content div[data-type="warning"] ol,#sbo-rt-content div[data-type="warning"] ul,#sbo-rt-content div[data-type="caution"] ol,#sbo-rt-content div[data-type="caution"] ul,#sbo-rt-content div[data-type="important"] ol,#sbo-rt-content div[data-type="important"] ul{margin-left:1.5em !important}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"]{border:1px solid #BEBEBE;background-color:transparent}#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{border:1px solid #BC8F8F}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="note"] h1,#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1,#sbo-rt-content div[data-type="important"] h6{font-weight:bold;font-size:110%;font-family:sans-serif !important;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px !important}#sbo-rt-content div[data-type="tip"] figure h6,#sbo-rt-content div[data-type="note"] figure h6,#sbo-rt-content div[data-type="warning"] figure h6,#sbo-rt-content div[data-type="caution"] figure h6,#sbo-rt-content div[data-type="important"] figure h6{font-family:serif !important}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div[data-type="note"] h1{color:#737373}#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="important"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1{color:#C67171}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,#sbo-rt-content div.safarienabled{background-color:transparent;margin:8px 0 0 !important;border:0 solid #BEBEBE;font-size:100%;padding:0 !important;page-break-inside:avoid}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,#sbo-rt-content div.safarienabled h6{display:none}#sbo-rt-content div.table,#sbo-rt-content table{margin:15px 0 30px 0 !important;max-width:95%;border:none !important;background:none;display:table !important}#sbo-rt-content div.table,#sbo-rt-content div.informaltable,#sbo-rt-content table{page-break-inside:avoid}#sbo-rt-content table li{margin:10px 0 0 .25em !important}#sbo-rt-content tr,#sbo-rt-content tr td{border-bottom:1px solid #c3c3c3}#sbo-rt-content thead td,#sbo-rt-content thead th{border-bottom:#9d9d9d 1px solid !important;border-top:#9d9d9d 1px solid !important}#sbo-rt-content tr:nth-of-type(even){background-color:#f1f6fc}#sbo-rt-content thead{font-family:sans-serif;font-weight:bold}#sbo-rt-content td,#sbo-rt-content th{display:table-cell;padding:.3em;text-align:left;vertical-align:top;font-size:80%}#sbo-rt-content th{vertical-align:bottom}#sbo-rt-content div.informaltable table{margin:10px auto !important}#sbo-rt-content div.informaltable table tr{border-bottom:none}#sbo-rt-content div.informaltable table tr:nth-of-type(even){background-color:transparent}#sbo-rt-content div.informaltable td,#sbo-rt-content div.informaltable th{border:#9d9d9d 1px solid}#sbo-rt-content div.table-title,#sbo-rt-content table caption{font-weight:normal;font-style:italic;font-family:serif;font-size:1em;margin:10px 0 10px 0 !important;padding:0;page-break-after:avoid;text-align:left !important}#sbo-rt-content table code{font-size:smaller;word-break:break-all}#sbo-rt-content table.border tbody&gt;tr:last-child&gt;td{border-bottom:transparent}#sbo-rt-content div.equation,#sbo-rt-content div[data-type="equation"]{margin:10px 0 15px 0 !important}#sbo-rt-content div.equation-title,#sbo-rt-content div[data-type="equation"] h5{font-style:italic;font-weight:normal;font-family:serif !important;font-size:90%;margin:20px 0 10px 0 !important;page-break-after:avoid}#sbo-rt-content div.equation-contents{margin-left:20px}#sbo-rt-content div[data-type="equation"] math{font-size:calc(.35em + 1vw)}#sbo-rt-content span.inlinemediaobject{height:.85em;display:inline-block;margin-bottom:.2em}#sbo-rt-content span.inlinemediaobject img{margin:0;height:.85em}#sbo-rt-content div.informalequation{margin:20px 0 20px 20px;width:75%}#sbo-rt-content div.informalequation img{width:75%}#sbo-rt-content div.index{text-indent:0}#sbo-rt-content div.index h3{padding:.25em;margin-top:1em !important;background-color:#F0F0F0}#sbo-rt-content div.index li{line-height:130%;list-style-type:none}#sbo-rt-content div.index a.indexterm{color:#8e0012 !important}#sbo-rt-content div.index ul{margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.index ul ul{margin-left:2em !important;margin-top:0 !important}#sbo-rt-content code.boolean,#sbo-rt-content .navy{color:rgb(0,0,128);}#sbo-rt-content code.character,#sbo-rt-content .olive{color:rgb(128,128,0);}#sbo-rt-content code.comment,#sbo-rt-content .blue{color:rgb(0,0,255);}#sbo-rt-content code.conditional,#sbo-rt-content .limegreen{color:rgb(50,205,50);}#sbo-rt-content code.constant,#sbo-rt-content .darkorange{color:rgb(255,140,0);}#sbo-rt-content code.debug,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.define,#sbo-rt-content .darkgoldenrod,#sbo-rt-content .gold{color:rgb(184,134,11);}#sbo-rt-content code.delimiter,#sbo-rt-content .dimgray{color:rgb(105,105,105);}#sbo-rt-content code.error,#sbo-rt-content .red{color:rgb(255,0,0);}#sbo-rt-content code.exception,#sbo-rt-content .salmon{color:rgb(250,128,11);}#sbo-rt-content code.float,#sbo-rt-content .steelblue{color:rgb(70,130,180);}#sbo-rt-content pre code.function,#sbo-rt-content .green{color:rgb(0,128,0);}#sbo-rt-content code.identifier,#sbo-rt-content .royalblue{color:rgb(65,105,225);}#sbo-rt-content code.ignore,#sbo-rt-content .gray{color:rgb(128,128,128);}#sbo-rt-content code.include,#sbo-rt-content .purple{color:rgb(128,0,128);}#sbo-rt-content code.keyword,#sbo-rt-content .sienna{color:rgb(160,82,45);}#sbo-rt-content code.label,#sbo-rt-content .deeppink{color:rgb(255,20,147);}#sbo-rt-content code.macro,#sbo-rt-content .orangered{color:rgb(255,69,0);}#sbo-rt-content code.number,#sbo-rt-content .brown{color:rgb(165,42,42);}#sbo-rt-content code.operator,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.preCondit,#sbo-rt-content .teal{color:rgb(0,128,128);}#sbo-rt-content code.preProc,#sbo-rt-content .fuschia{color:rgb(255,0,255);}#sbo-rt-content code.repeat,#sbo-rt-content .indigo{color:rgb(75,0,130);}#sbo-rt-content code.special,#sbo-rt-content .saddlebrown{color:rgb(139,69,19);}#sbo-rt-content code.specialchar,#sbo-rt-content .magenta{color:rgb(255,0,255);}#sbo-rt-content code.specialcomment,#sbo-rt-content .seagreen{color:rgb(46,139,87);}#sbo-rt-content code.statement,#sbo-rt-content .forestgreen{color:rgb(34,139,34);}#sbo-rt-content code.storageclass,#sbo-rt-content .plum{color:rgb(221,160,221);}#sbo-rt-content code.string,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.structure,#sbo-rt-content .chocolate{color:rgb(210,106,30);}#sbo-rt-content code.tag,#sbo-rt-content .darkcyan{color:rgb(0,139,139);}#sbo-rt-content code.todo,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.type,#sbo-rt-content .mediumslateblue{color:rgb(123,104,238);}#sbo-rt-content code.typedef,#sbo-rt-content .darkgreen{color:rgb(0,100,0);}#sbo-rt-content code.underlined{text-decoration:underline;}#sbo-rt-content pre code.hll{background-color:#ffc}#sbo-rt-content pre code.c{color:#09F;font-style:italic}#sbo-rt-content pre code.err{color:#A00}#sbo-rt-content pre code.k{color:#069;font-weight:bold}#sbo-rt-content pre code.o{color:#555}#sbo-rt-content pre code.cm{color:#35586C;font-style:italic}#sbo-rt-content pre code.cp{color:#099}#sbo-rt-content pre code.c1{color:#35586C;font-style:italic}#sbo-rt-content pre code.cs{color:#35586C;font-weight:bold;font-style:italic}#sbo-rt-content pre code.gd{background-color:#FCC}#sbo-rt-content pre code.ge{font-style:italic}#sbo-rt-content pre code.gr{color:#F00}#sbo-rt-content pre code.gh{color:#030;font-weight:bold}#sbo-rt-content pre code.gi{background-color:#CFC}#sbo-rt-content pre code.go{color:#000}#sbo-rt-content pre code.gp{color:#009;font-weight:bold}#sbo-rt-content pre code.gs{font-weight:bold}#sbo-rt-content pre code.gu{color:#030;font-weight:bold}#sbo-rt-content pre code.gt{color:#9C6}#sbo-rt-content pre code.kc{color:#069;font-weight:bold}#sbo-rt-content pre code.kd{color:#069;font-weight:bold}#sbo-rt-content pre code.kn{color:#069;font-weight:bold}#sbo-rt-content pre code.kp{color:#069}#sbo-rt-content pre code.kr{color:#069;font-weight:bold}#sbo-rt-content pre code.kt{color:#078;font-weight:bold}#sbo-rt-content pre code.m{color:#F60}#sbo-rt-content pre code.s{color:#C30}#sbo-rt-content pre code.na{color:#309}#sbo-rt-content pre code.nb{color:#366}#sbo-rt-content pre code.nc{color:#0A8;font-weight:bold}#sbo-rt-content pre code.no{color:#360}#sbo-rt-content pre code.nd{color:#99F}#sbo-rt-content pre code.ni{color:#999;font-weight:bold}#sbo-rt-content pre code.ne{color:#C00;font-weight:bold}#sbo-rt-content pre code.nf{color:#C0F}#sbo-rt-content pre code.nl{color:#99F}#sbo-rt-content pre code.nn{color:#0CF;font-weight:bold}#sbo-rt-content pre code.nt{color:#309;font-weight:bold}#sbo-rt-content pre code.nv{color:#033}#sbo-rt-content pre code.ow{color:#000;font-weight:bold}#sbo-rt-content pre code.w{color:#bbb}#sbo-rt-content pre code.mf{color:#F60}#sbo-rt-content pre code.mh{color:#F60}#sbo-rt-content pre code.mi{color:#F60}#sbo-rt-content pre code.mo{color:#F60}#sbo-rt-content pre code.sb{color:#C30}#sbo-rt-content pre code.sc{color:#C30}#sbo-rt-content pre code.sd{color:#C30;font-style:italic}#sbo-rt-content pre code.s2{color:#C30}#sbo-rt-content pre code.se{color:#C30;font-weight:bold}#sbo-rt-content pre code.sh{color:#C30}#sbo-rt-content pre code.si{color:#A00}#sbo-rt-content pre code.sx{color:#C30}#sbo-rt-content pre code.sr{color:#3AA}#sbo-rt-content pre code.s1{color:#C30}#sbo-rt-content pre code.ss{color:#A60}#sbo-rt-content pre code.bp{color:#366}#sbo-rt-content pre code.vc{color:#033}#sbo-rt-content pre code.vg{color:#033}#sbo-rt-content pre code.vi{color:#033}#sbo-rt-content pre code.il{color:#F60}#sbo-rt-content pre code.g{color:#050}#sbo-rt-content pre code.l{color:#C60}#sbo-rt-content pre code.l{color:#F90}#sbo-rt-content pre code.n{color:#008}#sbo-rt-content pre code.nx{color:#008}#sbo-rt-content pre code.py{color:#96F}#sbo-rt-content pre code.p{color:#000}#sbo-rt-content pre code.x{color:#F06}#sbo-rt-content div.blockquote_sampler_toc{width:95%;margin:5px 5px 5px 10px !important}#sbo-rt-content div{font-family:serif;text-align:left}#sbo-rt-content .gray-background,#sbo-rt-content .reverse-video{background:#2E2E2E;color:#FFF}#sbo-rt-content .light-gray-background{background:#A0A0A0}#sbo-rt-content .preserve-whitespace{white-space:pre-wrap}#sbo-rt-content pre.break-code,#sbo-rt-content code.break-code,#sbo-rt-content .break-code pre,#sbo-rt-content .break-code code{word-break:break-all}#sbo-rt-content span.gray{color:#4C4C4C}#sbo-rt-content .width-10,#sbo-rt-content figure.width-10 img{width:10% !important}#sbo-rt-content .width-20,#sbo-rt-content figure.width-20 img{width:20% !important}#sbo-rt-content .width-30,#sbo-rt-content figure.width-30 img{width:30% !important}#sbo-rt-content .width-40,#sbo-rt-content figure.width-40 img{width:40% !important}#sbo-rt-content .width-50,#sbo-rt-content figure.width-50 img{width:50% !important}#sbo-rt-content .width-60,#sbo-rt-content figure.width-60 img{width:60% !important}#sbo-rt-content .width-70,#sbo-rt-content figure.width-70 img{width:70% !important}#sbo-rt-content .width-80,#sbo-rt-content figure.width-80 img{width:80% !important}#sbo-rt-content .width-90,#sbo-rt-content figure.width-90 img{width:90% !important}#sbo-rt-content .width-full,#sbo-rt-content .width-100{width:100% !important}#sbo-rt-content .sc{text-transform:none !important}#sbo-rt-content .right{float:none !important}#sbo-rt-content a.totri-footnote{padding:0 !important}#sbo-rt-content figure.width-10,#sbo-rt-content figure.width-20,#sbo-rt-content figure.width-30,#sbo-rt-content figure.width-40,#sbo-rt-content figure.width-50,#sbo-rt-content figure.width-60,#sbo-rt-content figure.width-70,#sbo-rt-content figure.width-80,#sbo-rt-content figure.width-90{width:auto !important}#sbo-rt-content p img,#sbo-rt-content pre img{height:1em;width:1em}#sbo-rt-content .tablerule td{border-bottom:.25pt solid black !important}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 2. Lexical Structure"><div class="chapter" id="lexical">
<h1><span class="label">Chapter 2. </span>Lexical Structure</h1>


<p>The<a data-type="indexterm" data-primary="JavaScript" data-secondary="introduction to" data-tertiary="lexical structure" id="JSintrolex02"/><a data-type="indexterm" data-primary="lexical structure" id="lexstruct02"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" id="Slex02"/> lexical structure of a programming language is the set of
elementary rules that specifies how you write programs in that
language. It is the lowest-level syntax of a language: it specifies
what variable names look like, the delimiter characters for comments,
and how one program statement is separated from the next, for
example. This short chapter documents the lexical structure of
JavaScript. It covers:</p>

<ul>
<li>
<p>Case sensitivity, spaces, and line breaks</p>
</li>
<li>
<p>Comments</p>
</li>
<li>
<p>Literals</p>
</li>
<li>
<p>Identifiers and reserved words</p>
</li>
<li>
<p>Unicode</p>
</li>
<li>
<p>Optional semicolons</p>
</li>
</ul>






<section data-type="sect1" data-pdf-bookmark="2.1 The Text of a JavaScript Program"><div class="sect1" id="idm46198572732536">
<h1>2.1 The Text of a JavaScript Program</h1>

<p>JavaScript<a data-type="indexterm" data-primary="lexical structure" data-secondary="case sensitivity" id="idm46198572731208"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="case sensitivity" id="idm46198572729848"/><a data-type="indexterm" data-primary="case sensitivity" id="idm46198572728632"/><a data-type="indexterm" data-primary="identifiers" data-secondary="case sensitivity" id="idm46198572727960"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="identifiers" id="Slexident02"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="identifiers" id="LSident02"/> is a case-sensitive language. This<a data-type="indexterm" data-primary="keywords" data-secondary="case sensitivity" id="idm46198572724184"/><a data-type="indexterm" data-primary="variables" data-secondary="case sensitivity" id="idm46198572723240"/><a data-type="indexterm" data-primary="functions" data-secondary="case sensitivity" id="idm46198572722296"/> means that language
keywords, variables, function names, and other <em>identifiers</em> must
always be typed with a consistent capitalization of letters. The
<code>while</code> keyword, for example, must be typed “while,” not “While”
or “WHILE.” Similarly, <code>online</code>, <code>Online</code>, <code>OnLine</code>, and <code>ONLINE</code>
are four distinct variable names.</p>

<p>JavaScript<a data-type="indexterm" data-primary="lexical structure" data-secondary="spaces" id="idm46198572718200"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="spaces" id="idm46198572717192"/> ignores spaces that appear between tokens in programs. For
the most part, JavaScript also ignores<a data-type="indexterm" data-primary="lexical structure" data-secondary="line breaks" id="idm46198572715736"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="line breaks" id="idm46198572714792"/><a data-type="indexterm" data-primary="line breaks" id="idm46198572713576"/><a data-type="indexterm" data-primary="newlines" data-secondary="using for code formatting" id="idm46198572712904"/> line breaks (but see
<a data-type="xref" href="#optionalsemicolons">§2.6</a> for an exception). Because you can use spaces
and newlines freely in your programs, you can format and indent your
programs in a neat and consistent way that makes the code easy to read
and <span class="keep-together">understand.</span></p>

<p>In addition to the regular space character (<code>\u0020</code>), JavaScript also
recognizes<a data-type="indexterm" data-primary="tabs" id="idm46198572709368"/> tabs, assorted<a data-type="indexterm" data-primary="ASCII control characters" id="idm46198572708536"/> ASCII control characters, and various<a data-type="indexterm" data-primary="Unicode character set" data-secondary="space characters" id="idm46198572707736"/> Unicode
space characters as whitespace. JavaScript<a data-type="indexterm" data-primary="line terminators" id="idm46198572706600"/> recognizes newlines,
carriage returns, and a carriage return/line feed sequence as line
terminators.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="2.2 Comments"><div class="sect1" id="idm46198572705560">
<h1>2.2 Comments</h1>

<p>JavaScript<a data-type="indexterm" data-primary="comments" data-secondary="syntax for" id="idm46198572704040"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="comments" id="idm46198572703032"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="comments" id="idm46198572702088"/><a data-type="indexterm" data-primary="// (double slashes)" id="idm46198572700872"/><a data-type="indexterm" data-primary="double slashes (//)" id="idm46198572700200"/> supports two styles of comments. Any text between a <code>//</code>
and the end of a line is treated as a comment and is ignored by
JavaScript. Any<a data-type="indexterm" data-primary="/* */ characters" id="idm46198572698952"/> text between the characters <code>/*</code> and <code>*/</code> is also
treated as a comment; these comments may span multiple lines but may
not be nested. The following lines of code are all legal JavaScript
<span class="keep-together">comments:</span></p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This is a single-line comment.</code>

<code class="cm">/* This is also a comment */</code>  <code class="c1">// and here is another comment.</code>

<code class="cm">/*</code>
<code class="cm"> * This is a multi-line comment. The extra * characters at the start of</code>
<code class="cm"> * each line are not a required part of the syntax; they just look cool!</code>
<code class="cm"> */</code></pre>
</div></section>













<section data-type="sect1" data-pdf-bookmark="2.3 Literals"><div class="sect1" id="idm46198572689496">
<h1>2.3 Literals</h1>

<p>A <em>literal</em> is<a data-type="indexterm" data-primary="lexical structure" data-secondary="literals" id="idm46198572687912"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="literals" id="idm46198572686904"/> a data value that appears directly in a program. The
following are all <span class="keep-together">literals:</span></p>

<pre data-type="programlisting" data-code-language="js"><code class="mi">12</code>               <code class="c1">// The number twelve</code>
<code class="mf">1.2</code>              <code class="c1">// The number one point two</code>
<code class="s2">"hello world"</code>    <code class="c1">// A string of text</code>
<code class="s1">'Hi'</code>             <code class="c1">// Another string</code>
<code class="kc">true</code>             <code class="c1">// A Boolean value</code>
<code class="kc">false</code>            <code class="c1">// The other Boolean value</code>
<code class="kc">null</code>             <code class="c1">// Absence of an object</code></pre>

<p>Complete details on numeric and string literals appear in
<a data-type="xref" href="ch03.xhtml#datatypes">Chapter 3</a>.</p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="2.4 Identifiers and Reserved Words"><div class="sect1" id="identifiers">
<h1>2.4 Identifiers and Reserved Words</h1>

<p>An<a data-type="indexterm" data-primary="identifiers" data-secondary="purpose of" id="idm46198572641448"/> <em>identifier</em> is simply a name. In JavaScript, identifiers are used
to name constants, variables, properties, functions, and classes and
to provide labels for certain loops in JavaScript code. A JavaScript
identifier<a data-type="indexterm" data-primary="identifiers" data-secondary="syntax for" id="idm46198572639672"/><a data-type="indexterm" data-primary="_ (underscore)" id="idm46198572638696"/><a data-type="indexterm" data-primary="underscore (_)" id="idm46198572638024"/><a data-type="indexterm" data-primary="$ (dollar sign)" id="idm46198572637352"/><a data-type="indexterm" data-primary="dollar sign ($)" id="idm46198572636680"/> must begin with a letter, an underscore (<code>_</code>), or a dollar
sign (<code>$</code>). Subsequent characters can be letters, digits, underscores,
or dollar signs. (Digits are not allowed as the first character so
that JavaScript can easily distinguish identifiers from numbers.)
These are all legal identifiers:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">i</code>
<code class="nx">my_variable_name</code>
<code class="nx">v13</code>
<code class="nx">_dummy</code>
<code class="nx">$str</code></pre>

<p>Like<a data-type="indexterm" data-primary="identifiers" data-secondary="reserved words" id="idm46198572586760"/> any language, JavaScript reserves certain identifiers for use by
the language itself. These “reserved words” cannot be used as
regular identifiers. They are listed in the next section.<a data-type="indexterm" data-primary="" data-startref="LSident02" id="idm46198572585544"/><a data-type="indexterm" data-primary="" data-startref="Slexident02" id="idm46198572584600"/></p>








<section data-type="sect2" data-pdf-bookmark="2.4.1 Reserved Words"><div class="sect2" id="reservedwords">
<h2>2.4.1 Reserved Words</h2>

<p>The<a data-type="indexterm" data-primary="reserved words" id="idm46198572627672"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="reserved words" id="idm46198572626216"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="reserved words" id="idm46198572625272"/> following words are part of the JavaScript language.
Many<a data-type="indexterm" data-primary="keywords" data-secondary="reserved words" id="idm46198572623928"/> of these (such as <code>if</code>, <code>while</code>, and <code>for</code>) are reserved
keywords that<a data-type="indexterm" data-primary="constants" data-secondary="naming" id="idm46198572621544"/><a data-type="indexterm" data-primary="variables" data-secondary="naming" id="idm46198572596296"/><a data-type="indexterm" data-primary="functions" data-secondary="naming" id="idm46198572595352"/><a data-type="indexterm" data-primary="classes" data-secondary="naming" id="idm46198572594408"/> must not be used as the names of constants, variables,
functions, or classes (though<a data-type="indexterm" data-primary="objects" data-secondary="naming properties within" id="idm46198572593336"/> they can all be used as the names of
properties within an object). Others (such as <code>from</code>, <code>of</code>, <code>get</code>, and
<code>set</code>) are used in limited contexts with no syntactic ambiguity and
are perfectly legal as identifiers. Still other keywords (such as
<code>let</code>) can’t be fully reserved in order to retain backward
compatibility with older programs, and so there are complex rules that
govern when they can be used as identifiers and when they
cannot. (<code>let</code> can be used as a variable name if declared with <code>var</code>
outside of a class, for example, but not if declared inside a class or
with <code>const</code>.) The simplest course is to avoid using any of these
words as identifiers, except for <code>from</code>, <code>set</code>, and <code>target</code>,
which are safe to use and are already in common use.</p>

<pre data-type="programlisting">as      const      export     get         null     target   void
async   continue   extends    if          of       this     while
await   debugger   false      import      return   throw    with
break   default    finally    in          set      true     yield
case    delete     for        instanceof  static   try
catch   do         from       let         super    typeof
class   else       function   new         switch   var</pre>

<p>JavaScript also reserves or restricts the use of certain keywords that
are not currently used by the language but that might be used in
future versions:</p>

<pre data-type="programlisting">enum  implements  interface  package  private  protected  public</pre>

<p>For historical reasons, <code>arguments</code> and <code>eval</code> are not allowed as
identifiers in certain circumstances and are best avoided entirely.</p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="2.5 Unicode"><div class="sect1" id="idm46198572563400">
<h1>2.5 Unicode</h1>

<p>JavaScript<a data-type="indexterm" data-primary="Unicode character set" data-secondary="overview of" id="idm46198572561832"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="Unicode character set" data-tertiary="overview of" id="idm46198572560824"/> programs are written using the Unicode character set, and
you can use any Unicode characters in strings and comments. For
portability and ease of editing, it is common to use only ASCII
letters and digits in identifiers. But this is a programming
convention only, and the language allows Unicode letters, digits, and
ideographs<a data-type="indexterm" data-primary="ideographs" id="idm46198572559128"/><a data-type="indexterm" data-primary="emojis" id="idm46198572558456"/> (but not emojis) in identifiers. This means that
programmers can use mathematical symbols and words from non-English
languages as constants and variables:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kr">const</code> <code class="nx">π</code> <code class="o">=</code> <code class="mf">3.14</code><code class="p">;</code>
<code class="kr">const</code> <code class="nx">sí</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code></pre>








<section data-type="sect2" data-pdf-bookmark="2.5.1 Unicode Escape Sequences"><div class="sect2" id="idm46198572503304">
<h2>2.5.1 Unicode Escape Sequences</h2>

<p>Some<a data-type="indexterm" data-primary="Unicode character set" data-secondary="escape sequences" id="idm46198572547912"/><a data-type="indexterm" data-primary="escape sequences" data-secondary="Unicode" id="idm46198572546936"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="Unicode character set" data-tertiary="escape sequences" id="idm46198572545992"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="Unicode character set" id="Slexuni02"/> computer hardware and software cannot display, input, or
correctly process the full set of Unicode characters. To support
programmers and systems using older technology, JavaScript defines
escape sequences that allow us to write Unicode characters using only
ASCII characters. These<a data-type="indexterm" data-primary="\u (Unicode character escape)" id="idm46198572537912"/> Unicode escapes begin with the characters <code>\u</code>
and are either followed by exactly four hexadecimal digits (using
uppercase or lowercase letters A–F) or by one to six hexadecimal digits
enclosed within curly braces. These Unicode escapes may appear in
JavaScript string literals, regular expression literals, and identifiers (but not in language keywords). The Unicode escape for the
character “é,” for example, is <code>\u00E9</code>; here are three different
ways to write a variable name that includes this character:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">café</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code> <code class="c1">// Define a variable using a Unicode character</code>
<code class="nx">caf\u00e9</code>     <code class="c1">// =&gt; 1; access the variable using an escape sequence</code>
<code class="nx">caf</code><code class="err">\</code><code class="nx">u</code><code class="p">{</code><code class="nx">E9</code><code class="p">}</code>     <code class="c1">// =&gt; 1; another form of the same escape sequence</code></pre>

<p>Early versions of JavaScript only supported the four-digit escape
sequence. The version with curly braces was introduced
in ES6 to better
support Unicode codepoints that require more than 16 bits, such as
emoji:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"\u{1F600}"</code><code class="p">);</code>  <code class="c1">// Prints a smiley face emoji</code></pre>

<p>Unicode escapes may also appear in comments, but since comments are
ignored, they are simply treated as ASCII characters in that context
and not interpreted as Unicode.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="2.5.2 Unicode Normalization"><div class="sect2" id="idm46198572524792">
<h2>2.5.2 Unicode Normalization</h2>

<p>If<a data-type="indexterm" data-primary="normalization" id="idm46198572425480"/><a data-type="indexterm" data-primary="Unicode character set" data-secondary="normalization" id="idm46198572424744"/><a data-type="indexterm" data-primary="lexical structure" data-secondary="Unicode character set" data-tertiary="normalization" id="idm46198572423800"/> you use non-ASCII characters in your JavaScript programs, you must
be aware that Unicode allows more than one way of encoding the same
character. The string “é,” for example, can be encoded as the single
Unicode character <code>\u00E9</code> or as a regular ASCII “e” followed by the
acute accent combining mark <code>\u0301</code>. These two encodings typically look
exactly the same when displayed by a text editor, but they have
different binary encodings, meaning that they are considered
different by JavaScript, which can lead to very confusing programs:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kr">const</code> <code class="nx">café</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>  <code class="c1">// This constant is named "caf\u{e9}"</code>
<code class="kr">const</code> <code class="nx">café</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>  <code class="c1">// This constant is different: "cafe\u{301}"</code>
<code class="nx">café</code>  <code class="c1">// =&gt; 1: this constant has one value</code>
<code class="nx">café</code>  <code class="c1">// =&gt; 2: this indistinguishable constant has a different value</code></pre>

<p>The Unicode standard defines the preferred encoding for all characters
and specifies a normalization procedure to convert text to a canonical
form suitable for comparisons. JavaScript assumes that the source code
it is interpreting has already been normalized and does <em>not</em> do any
normalization on its own. If<a data-type="indexterm" data-primary="text editors" data-secondary="normalization" id="idm46198572376216"/> you plan to use Unicode characters in
your JavaScript programs, you should ensure that your editor or some
other tool performs Unicode normalization of your source code to
prevent you from ending up with different but visually
indistinguishable identifiers.<a data-type="indexterm" data-primary="" data-startref="Slexuni02" id="idm46198572374936"/></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="2.6 Optional Semicolons"><div class="sect1" id="optionalsemicolons">
<h1>2.6 Optional Semicolons</h1>

<p>Like<a data-type="indexterm" data-primary="lexical structure" data-secondary="semicolons" id="Lsemi02"/><a data-type="indexterm" data-primary="syntax" data-secondary="lexical structure" data-tertiary="semicolons" id="Slexsemic02"/><a data-type="indexterm" data-primary="optional semicolons" id="optsemi02"/><a data-type="indexterm" data-primary="; (semicolon)" id="semi02"/><a data-type="indexterm" data-primary="semicolon (;)" id="semicol02"/><a data-type="indexterm" data-primary="statements" data-secondary="separating with semicolons" id="Ssemi02"/> many programming languages, JavaScript uses the semicolon (<code>;</code>)
to separate statements (see <a data-type="xref" href="ch05.xhtml#statements">Chapter 5</a>) from one another. This is
important for making the meaning of your code clear: without a separator,
the end of one statement might appear to be the beginning of the next,
or vice versa. In JavaScript, you can usually omit the semicolon
between two statements if those statements are written on separate
lines. (You can also omit a semicolon at the end of a program or if
the next token in the program is a closing curly brace: <code>}</code>.) Many
JavaScript programmers (and the code in this book) use semicolons to
explicitly mark the ends of statements, even where they are not
required.  Another style is to omit semicolons whenever possible,
using them only in the few situations that require them. Whichever
style you choose, there are a few details you should understand about
optional semicolons in JavaScript.</p>

<p>Consider the following code. Since the two statements appear on
separate lines, the first semicolon could be omitted:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">a</code> <code class="o">=</code> <code class="mi">3</code><code class="p">;</code>
<code class="nx">b</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code></pre>

<p>Written as follows, however, the first semicolon is required:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">a</code> <code class="o">=</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">b</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code></pre>

<p>Note<a data-type="indexterm" data-primary="statements" data-secondary="line breaks and" id="Slineb02"/><a data-type="indexterm" data-primary="line breaks" id="line02"/> that JavaScript does not treat every line break as a semicolon:
it usually treats line breaks as semicolons only if it can’t parse the
code without adding an implicit semicolon. More formally (and with three
exceptions described a bit later), JavaScript treats a line break as a
semicolon if the next nonspace character cannot be interpreted as a
continuation of the current statement. Consider the following code:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">a</code>
<code class="nx">a</code>
<code class="o">=</code>
<code class="mi">3</code>
<code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">a</code><code class="p">)</code></pre>

<p>JavaScript interprets this code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">a</code><code class="p">;</code> <code class="nx">a</code> <code class="o">=</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">a</code><code class="p">);</code></pre>

<p>JavaScript does treat the first line break as a semicolon because it
cannot parse the code <code>let a a</code> without a semicolon. The second <code>a</code>
could stand alone as the statement <code>a;</code>, but JavaScript does not treat
the second line break as a semicolon because it can continue parsing
the longer statement <code>a = 3;</code>.</p>

<p>These<a data-type="indexterm" data-primary="newlines" id="newline02"/> statement termination rules lead to some surprising cases. This code
looks like two separate statements separated with a newline:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">y</code> <code class="o">=</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">f</code>
<code class="p">(</code><code class="nx">a</code><code class="o">+</code><code class="nx">b</code><code class="p">).</code><code class="nx">toString</code><code class="p">()</code></pre>

<p>But the parentheses on the second line of code can be interpreted as a
function invocation of <code>f</code> from the first line, and JavaScript
interprets the code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">y</code> <code class="o">=</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">f</code><code class="p">(</code><code class="nx">a</code><code class="o">+</code><code class="nx">b</code><code class="p">).</code><code class="nx">toString</code><code class="p">();</code></pre>

<p>More likely than not, this is not the interpretation intended by the
author of the code. In order to work as two separate statements, an
explicit semicolon is required in this case.</p>

<p>In general, if a statement begins with <code>(</code>, <code>[</code>, <code>/</code>, <code>+</code>, or <code>-</code>,
there is a chance that it could be interpreted as a continuation of
the statement before. Statements beginning with <code>/</code>, <code>+</code>, and <code>-</code> are
quite rare in practice, but statements beginning with <code>(</code> and <code>[</code> are
not uncommon at all, at least in some styles of JavaScript
programming. Some programmers like to put a defensive semicolon at the
beginning of any such statement so that it will continue to work
correctly even if the statement before it is modified and a previously
terminating semicolon removed:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">x</code> <code class="o">=</code> <code class="mi">0</code>                         <code class="c1">// Semicolon omitted here</code>
<code class="p">;[</code><code class="nx">x</code><code class="p">,</code><code class="nx">x</code><code class="o">+</code><code class="mi">1</code><code class="p">,</code><code class="nx">x</code><code class="o">+</code><code class="mi">2</code><code class="p">].</code><code class="nx">forEach</code><code class="p">(</code><code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">)</code> <code class="c1">// Defensive ; keeps this statement separate</code></pre>

<p>There are three exceptions to the general rule that JavaScript
interprets line breaks as semicolons when it cannot parse the second
line as a continuation of the statement on the first line. The first
exception involves the <code>return</code>, <code>throw</code>, <code>yield</code>, <code>break</code>, and
<code>continue</code> statements (see <a data-type="xref" href="ch05.xhtml#statements">Chapter 5</a>). These statements often
stand alone, but they are sometimes followed by an identifier or
expression. If a line break appears after any of these words (before
any other tokens), JavaScript will always interpret that line break as
a semicolon. For example, if you write:</p>

<pre data-type="programlisting" data-code-language="js"><code class="k">return</code>
<code class="kc">true</code><code class="p">;</code></pre>

<p>JavaScript assumes you meant:</p>

<pre data-type="programlisting" data-code-language="js"><code class="k">return</code><code class="p">;</code> <code class="kc">true</code><code class="p">;</code></pre>

<p>However, you probably meant:</p>

<pre data-type="programlisting" data-code-language="js"><code class="k">return</code> <code class="kc">true</code><code class="p">;</code></pre>

<p>This means that you must not insert a line break between
<code>return</code>, <code>break</code>, or <code>continue</code> and the expression that follows the
keyword. If you do insert a line break, your code is likely to fail in
a nonobvious way that is difficult to debug.</p>

<p>The second exception involves the <code>++</code> and <code>−−</code> operators
(<a data-type="xref" href="ch04.xhtml#arithmeticoperators">§4.8</a>). These operators can be prefix operators
that appear before an expression or<a data-type="indexterm" data-primary="postfix operators" id="idm46198572007208"/><a data-type="indexterm" data-primary="operators" data-secondary="postfix operators" id="idm46198572006536"/> postfix operators that appear
after an expression. If you want to use either of these operators as
postfix operators, they must appear on the same line as the expression
they apply to. The<a data-type="indexterm" data-primary="=&gt; (arrows)" id="idm46198572005256"/><a data-type="indexterm" data-primary="arrows (=&gt;)" id="idm46198572004584"/> third exception involves functions defined using
concise “arrow” syntax: the <code>=&gt;</code> arrow itself
must appear on the same line as the parameter list.<a data-type="indexterm" data-primary="" data-startref="semi02" id="idm46198572003400"/><a data-type="indexterm" data-primary="" data-startref="Ssemi02" id="idm46198572091752"/><a data-type="indexterm" data-primary="" data-startref="line02" id="idm46198572090808"/><a data-type="indexterm" data-primary="" data-startref="newline02" id="idm46198572089864"/><a data-type="indexterm" data-primary="" data-startref="Slineb02" id="idm46198572088920"/><a data-type="indexterm" data-primary="" data-startref="semicol02" id="idm46198572087976"/><a data-type="indexterm" data-primary="" data-startref="optsemi02" id="idm46198572087032"/><a data-type="indexterm" data-primary="" data-startref="Slexsemic02" id="idm46198572031528"/><a data-type="indexterm" data-primary="" data-startref="Lsemi02" id="idm46198572030584"/></p>
</div></section>













<section data-type="sect1" data-pdf-bookmark="2.7 Summary"><div class="sect1" id="idm46198572372952">
<h1>2.7 Summary</h1>

<p>This chapter has shown how JavaScript programs are written at the
lowest level. The next chapter takes us one step higher and introduces
the primitive types and values (numbers, strings, and so on) that
serve as the basic units of computation for JavaScript programs.<a data-type="indexterm" data-primary="" data-startref="JSintrolex02" id="idm46198572028776"/><a data-type="indexterm" data-primary="" data-startref="lexstruct02" id="idm46198572027800"/><a data-type="indexterm" data-primary="" data-startref="Slex02" id="idm46198572026856"/></p>
</div></section>







</div></section></div>



  </body>
</html>